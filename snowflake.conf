set { dest = 'appomni.service.type', value = 'snowflake' }
# Start LOGIN_HISTORY
if ( 'raw_event_data.EVENT_TYPE' == 'LOGIN' ) {
    # Flag to indicate that is a LOGIN_HISTORY
    set { dest = 'temp_login_history_flag', value = 'true' }

    # schema reference: https://docs.snowflake.com/en/sql-reference/account-usage/login_history.html
    copy { src = 'raw_event_data', dest = 'snowflake.login' }

    # basic event parsing
    date { src = 'raw_event_data.EVENT_TIMESTAMP' }
    append { dest = 'event.type', value = 'info' }
    rename { src = 'raw_event_data.EVENT_ID', dest = 'event.id'}

    # authentication event parsing
    rename { src = 'raw_event_data.EVENT_TYPE', dest = 'event.code'}
    set { dest = 'event.action', value = 'login_user' }
    rename { src = 'raw_event_data.ERROR_MESSAGE', dest = 'event.reason' }

    rename { src = 'raw_event_data.USER_NAME', dest = 'user.target.name'}
    parse_ip { src = 'raw_event_data.CLIENT_IP', dest = 'source' }

    if ( 'raw_event_data.IS_SUCCESS' == 'YES' ) {
        set { dest = 'event.outcome', value = 'success' }
    }
    if ( 'raw_event_data.IS_SUCCESS' == 'NO' ) {
        set { dest = 'event.outcome', value = 'failure' }
    }

    rename { src = 'raw_event_data.REPORTED_CLIENT_TYPE', dest = 'labels.client_type' }
    rename { src = 'raw_event_data.REPORTED_CLIENT_VERSION', dest = 'labels.client_version' }
    rename { src = 'raw_event_data.FIRST_AUTHENTICATION_FACTOR', dest = 'authentication.raw_method' }
    rename { src = 'raw_event_data.SECOND_AUTHENTICATION_FACTOR', dest = 'labels.second_authentication_factor' }
}
# End LOGIN_HISTORY

# Start QUERY_HISTORY
if ( 'raw_event_data.QUERY_TYPE' exists ) {
    # Flag to indicate that is a QUERY_HISTORY
    set { dest = 'temp_query_history_flag', value = 'true' }

    # schema reference: https://docs.snowflake.com/en/sql-reference/account-usage/query_history.html
    copy { src = 'raw_event_data', dest = 'snowflake.query' }

    # basic event parsing
    date { src = 'raw_event_data.START_TIME' }
    append { dest = 'event.type', value = 'info' }
    copy { src = 'raw_event_data.QUERY_ID', dest = 'event.id'}
    rename { src = 'raw_event_data.QUERY_TYPE', dest = 'event.code'}

    rename { src = 'raw_event_data.SESSION_ID', dest = 'session.id' }
    rename { src = 'raw_event_data.USER_NAME', dest = 'user.name'}
    copy { src = 'raw_event_data.ROLE_NAME', dest = 'user.roles', append = true }
    rename { src = 'raw_event_data.ERROR_MESSAGE', dest = 'error.message'}

    if ('raw_event_data.EXECUTION_STATUS' == 'SUCCESS') {
        set { dest = 'event.outcome', value = 'success' }
    }
    if ('raw_event_data.EXECUTION_STATUS' == 'FAIL') {
        set { dest = 'event.outcome', value = 'failure' }
    }

    convert { src = 'raw_event_data.ROWS_PRODUCED', type = 'int'}
    # TODO: Deprecate (remove next 1 line)
    copy { src = 'raw_event_data.ROWS_PRODUCED', dest = 'labels.row_count'}
    rename { src = 'raw_event_data.ROWS_PRODUCED', dest = 'resource.count'}
    rename { src = 'raw_event_data.QUERY_TEXT', dest = 'labels.query'}
    # For Query events, we parse the Database name to resource.name and query_id to event.id
    # I'm adding a query_id label just so that it's easier to match with the existing labels.query
    rename { src = 'raw_event_data.QUERY_ID', dest = 'labels.query_id'}
    # TODO: Deprecate (remove next 1 line)
    copy { src = 'raw_event_data.DATABASE_NAME', dest = 'labels.database'}
    rename { src = 'raw_event_data.DATABASE_NAME', dest = 'resource.name'}
    rename { src = 'raw_event_data.DATABASE_ID', dest = 'resource.id'}
    set { dest = 'resource.type', value = 'datastore' }
    rename { src = 'raw_event_data.SCHEMA_NAME', dest = 'labels.schema'}
    rename { src = 'raw_event_data.WAREHOUSE_NAME', dest = 'labels.warehouse'}

    if ('raw_event_data.ROWS_DELETED' != '0') {
        rename { src = 'raw_event_data.ROWS_DELETED', dest = 'labels.rows_deleted'}
        convert { src = 'labels.rows_deleted', type = 'int'}
    }

    # Customized mappings; https://docs.snowflake.com/en/sql-reference/sql-all.html

    # Modifies the metadata of an account-level or database object, or the parameters for a session
    if ( 'event.code' starts_with 'ALTER' ) {
        set { dest = 'event.action', value = 'update_resource' }
        if ( 'labels.query' starts_with 'ALTER ACCOUNT' ) {
            set { dest = 'event.action', value = 'update_account' }
        }
        if ( 'labels.query' starts_with 'ALTER API INTEGRATION' ) {
            set { dest = 'event.action', value = 'update_api' }
        }
        if ( 'labels.query' starts_with 'ALTER CONNECTION' ) {
            set { dest = 'resource.type', value = 'destination' }
        }
        if ( 'labels.query' starts_with 'ALTER DATABASE' ) {
            set { dest = 'resource.type', value = 'datastore' }
        }
        if ( 'labels.query' starts_with 'ALTER EXTERNAL TABLE' ) {
            set { dest = 'resource.type', value = 'table' }
        }
        if ( 'labels.query' starts_with 'ALTER INTEGRATION' ) {
            set { dest = 'resource.type', value = 'application' }
        }
        if ( 'labels.query' starts_with 'ALTER MASKING POLICY' ) {
            set { dest = 'event.action', value = 'update_policy' }
        }
        if ( 'labels.query' starts_with 'ALTER MATERIALIZED VIEW' ) {
            set { dest = 'resource.type', value = 'table' }
        }
        if ( 'labels.query' starts_with 'ALTER NETWORK POLICY' ) {
            set { dest = 'event.action', value = 'update_policy' }
        }
        if ( 'labels.query' starts_with 'ALTER NOTIFICATION INTEGRATION' ) {
            set { dest = 'resource.type', value = 'application' }
        }
        if ( 'labels.query' starts_with 'ALTER ROLE' ) {
            set { dest = 'event.action', value = 'update_role' }
        }
        if ( 'labels.query' starts_with 'ALTER ROW ACCESS POLICY' ) {
            set { dest = 'event.action', value = 'update_policy' }
        }
        if ( 'labels.query' starts_with 'ALTER SCHEMA' ) {
            set { dest = 'resource.type', value = 'code' }
        }
        if ( 'labels.query' starts_with 'ALTER SECURITY INTEGRATION' ) {
            set { dest = 'resource.type', value = 'application' }
        }
        if ( 'labels.query' starts_with 'ALTER SESSION' ) {
            set { dest = 'event.action', value = 'update_session' }
        }
        if ( 'labels.query' starts_with 'ALTER SESSION POLICY' ) {
            set { dest = 'event.action', value = 'update_policy' }
        }
        if ( 'labels.query' starts_with 'ALTER SHARE' ) {
            set { dest = 'event.action', value = 'update_share' }
        }
        if ( 'labels.query' starts_with 'ALTER STORAGE INTEGRATION' ) {
            set { dest = 'resource.type', value = 'application' }
        }
        if ( 'labels.query' starts_with 'ALTER TABLE' ) {
            set { dest = 'resource.type', value = 'table' }
        }
        if ( 'labels.query' starts_with 'ALTER STAGE' ) {
            set { dest = 'resource.type', value = 'datastore' }
        }
        if ( 'labels.query' starts_with 'ALTER TASK' ) {
            set { dest = 'event.action', value = 'update_task' }
        }
        if ( 'labels.query' starts_with 'ALTER USER' ) {
            set { dest = 'event.action', value = 'update_user' }
            if ( 'labels.query' contains 'PASSWORD' ) {
                set { dest = 'event.action', value = 'update_password' }
            }
        }
        if ( 'labels.query' starts_with 'ALTER VIEW' ) {
            set { dest = 'resource.type', value = 'table' }
        }
        if ( 'labels.query' starts_with 'ALTER WAREHOUSE' ) {
            set { dest = 'resource.type', value = 'datastore' }
        }
    }

    # Unloads or loads data from one location to another
    if ( 'event.code' starts_with 'COPY' ) {
        set { dest = 'event.action', value = 'copy_resource' }
    }

    # Creates a new object of the specified type
    if ( 'event.code' starts_with 'CREATE' ) {
        set { dest = 'event.action', value = 'create_resource' }
        if ( 'labels.query' starts_with 'CREATE ACCOUNT' ) {
            set { dest = 'event.action', value = 'create_account' }
        }
        if ( 'labels.query' starts_with 'CREATE API INTEGRATION' ) {
            set { dest = 'event.action', value = 'create_api' }
        }
        if ( 'labels.query' starts_with 'CREATE CONNECTION' ) {
            set { dest = 'resource.type', value = 'destination' }
        }
        if ( 'labels.query' starts_with 'CREATE DATABASE' ) {
            set { dest = 'resource.type', value = 'datastore' }
        }
        if ( 'labels.query' starts_with 'CREATE EXTERNAL TABLE' ) {
            set { dest = 'resource.type', value = 'table' }
        }
        if ( 'labels.query' starts_with 'CREATE INTEGRATION' ) {
            set { dest = 'resource.type', value = 'application' }
        }
        if ( 'labels.query' starts_with 'CREATE MANAGED ACCOUNT' ) {
            set { dest = 'event.action', value = 'create_account' }
        }
        if ( 'labels.query' starts_with 'CREATE MASKING POLICY' ) {
            set { dest = 'event.action', value = 'create_policy' }
        }
        if ( 'labels.query' starts_with 'CREATE MATERIALIZED VIEW' ) {
            set { dest = 'resource.type', value = 'table' }
        }
        if ( 'labels.query' starts_with 'CREATE NETWORK POLICY' ) {
            set { dest = 'event.action', value = 'create_policy' }
        }
        if ( 'labels.query' starts_with 'CREATE NOTIFICATION INTEGRATION' ) {
            set { dest = 'resource.type', value = 'application' }
        }
        if ( 'labels.query' starts_with 'CREATE ROLE' ) {
            set { dest = 'event.action', value = 'create_role' }
        }
        if ( 'labels.query' starts_with 'CREATE ROW ACCESS POLICY' ) {
            set { dest = 'event.action', value = 'create_policy' }
        }
        if ( 'labels.query' starts_with 'CREATE SCHEMA' ) {
            set { dest = 'resource.type', value = 'code' }
        }
        if ( 'labels.query' starts_with 'CREATE SECURITY INTEGRATION' ) {
            set { dest = 'resource.type', value = 'application' }
        }
        if ( 'labels.query' starts_with 'CREATE SESSION POLICY' ) {
            set { dest = 'event.action', value = 'create_policy' }
        }
        if ( 'labels.query' starts_with 'CREATE SHARE' ) {
            set { dest = 'event.action', value = 'create_share' }
        }
        if ( 'labels.query' starts_with 'CREATE STORAGE INTEGRATION' ) {
            set { dest = 'resource.type', value = 'application' }
        }
        if ( 'labels.query' starts_with 'CREATE TABLE' ) {
            set { dest = 'resource.type', value = 'table' }
        }
        if ( 'labels.query' starts_with 'CREATE STAGE' ) {
            set { dest = 'resource.type', value = 'datastore' }
        }
        if ( 'labels.query' starts_with 'CREATE TASK' ) {
            set { dest = 'event.action', value = 'create_task' }
        }
        if ( 'labels.query' starts_with 'CREATE USER' ) {
            set { dest = 'event.action', value = 'create_user' }
        }
        if ( 'labels.query' starts_with 'CREATE VIEW' ) {
            set { dest = 'resource.type', value = 'table' }
        }
        if ( 'labels.query' starts_with 'CREATE WAREHOUSE' ) {
            set { dest = 'resource.type', value = 'datastore' }
        }
    }

    # Remove rows from a table
    if ( 'event.code' starts_with 'DELETE' ) {
        set { dest = 'event.action', value = 'delete_resource' }
        set { dest = 'resource.type', value = 'record' }
    }

    # Describes the details for the specified object
    if ( 'event.code' starts_with 'DESCRIBE' ) {
        set { dest = 'event.action', value = 'read_resource' }
        if ( 'labels.query' starts_with 'DESCRIBE EXTERNAL TABLE' ) {
            set { dest = 'resource.type', value = 'table' }
        }
        if ( 'labels.query' starts_with 'DESCRIBE INTEGRATION' ) {
            set { dest = 'resource.type', value = 'application' }
        }
        if ( 'labels.query' starts_with 'DESCRIBE MASKING POLICY' ) {
            set { dest = 'event.action', value = 'read_policy' }
        }
        if ( 'labels.query' starts_with 'DESCRIBE MATERIALIZED VIEW' ) {
            set { dest = 'resource.type', value = 'table' }
        }
        if ( 'labels.query' starts_with 'DESCRIBE NETWORK POLICY' ) {
            set { dest = 'event.action', value = 'read_policy' }
        }
        if ( 'labels.query' starts_with 'DESCRIBE ROW ACCESS POLICY' ) {
            set { dest = 'event.action', value = 'read_policy' }
        }
        if ( 'labels.query' starts_with 'DESCRIBE SESSION POLICY' ) {
            set { dest = 'event.action', value = 'read_policy' }
        }
        if ( 'labels.query' starts_with 'DESCRIBE SHARE' ) {
            set { dest = 'event.action', value = 'read_share' }
        }
        if ( 'labels.query' starts_with 'DESCRIBE TABLE' ) {
            set { dest = 'resource.type', value = 'table' }
        }
        if ( 'labels.query' starts_with 'DESCRIBE STAGE' ) {
            set { dest = 'resource.type', value = 'datastore' }
        }
        if ( 'labels.query' starts_with 'DESCRIBE TASK' ) {
            set { dest = 'event.action', value = 'read_task' }
        }
        if ( 'labels.query' starts_with 'DESCRIBE USER' ) {
            set { dest = 'event.action', value = 'read_user' }
        }
        if ( 'labels.query' starts_with 'DESCRIBE VIEW' ) {
            set { dest = 'resource.type', value = 'table' }
        }
    }

    # Removes the specified object from the system
    if ( 'event.code' starts_with 'DROP' ) {
        set { dest = 'event.action', value = 'delete_resource' }
        if ( 'labels.query' starts_with 'DROP CONNECTION' ) {
            set { dest = 'resource.type', value = 'destination' }
        }
        if ( 'labels.query' starts_with 'DROP DATABASE' ) {
            set { dest = 'resource.type', value = 'datastore' }
        }
        if ( 'labels.query' starts_with 'DROP EXTERNAL TABLE' ) {
            set { dest = 'resource.type', value = 'table' }
        }
        if ( 'labels.query' starts_with 'DROP INTEGRATION' ) {
            set { dest = 'resource.type', value = 'application' }
        }
        if ( 'labels.query' starts_with 'DROP MANAGED ACCOUNT' ) {
            set { dest = 'event.action', value = 'delete_account' }
        }
        if ( 'labels.query' starts_with 'DROP MASKING POLICY' ) {
            set { dest = 'event.action', value = 'delete_policy' }
        }
        if ( 'labels.query' starts_with 'DROP MATERIALIZED VIEW' ) {
            set { dest = 'resource.type', value = 'table' }
        }
        if ( 'labels.query' starts_with 'DROP NETWORK POLICY' ) {
            set { dest = 'event.action', value = 'delete_policy' }
        }
        if ( 'labels.query' starts_with 'DROP ROLE' ) {
            set { dest = 'event.action', value = 'delete_role' }
        }
        if ( 'labels.query' starts_with 'DROP ROW ACCESS POLICY' ) {
            set { dest = 'event.action', value = 'delete_policy' }
        }
        if ( 'labels.query' starts_with 'DROP SCHEMA' ) {
            set { dest = 'resource.type', value = 'code' }
        }
        if ( 'labels.query' starts_with 'DROP SESSION POLICY' ) {
            set { dest = 'event.action', value = 'delete_policy' }
        }
        if ( 'labels.query' starts_with 'DROP SHARE' ) {
            set { dest = 'resource.type', value = 'table' }
        }
        if ( 'labels.query' starts_with 'DROP TABLE' ) {
            set { dest = 'resource.type', value = 'table' }
        }
        if ( 'labels.query' starts_with 'DROP STAGE' ) {
            set { dest = 'resource.type', value = 'datastore' }
        }
        if ( 'labels.query' starts_with 'DROP TASK' ) {
            set { dest = 'event.action', value = 'delete_task' }
        }
        if ( 'labels.query' starts_with 'DROP USER' ) {
            set { dest = 'event.action', value = 'delete_user' }
        }
        if ( 'labels.query' starts_with 'DROP VIEW' ) {
            set { dest = 'resource.type', value = 'table' }
        }
        if ( 'labels.query' starts_with 'DROP WAREHOUSE' ) {
            set { dest = 'resource.type', value = 'datastore' }
        }
        if ( 'labels.query' starts_with 'drop table' ) {
            set { dest = 'resource.type', value = 'datastore' }
        }
    }

    # Executes a string that contains a SQL statement or a scheduled task
    if ( 'event.code' starts_with 'EXECUTE' ) {
        if ( 'labels.query' starts_with 'EXECUTE IMMEDIATE' ) {
            set { dest = 'event.action', value = 'execute_command' }
        }
        if ( 'labels.query' starts_with 'EXECUTE TASK' ) {
            set { dest = 'event.action', value = 'execute_task' }
        }
    }

    # Downloads data files
    if ( 'event.code' starts_with 'GET' ) {
        set { dest = 'event.action', value = 'download_resource' }
        append { dest = 'event.type', value = 'access' }
        set { dest = 'resource.type', value = 'file' }
    }

    # Grants one or more privileges to a role, share, or user
    # Transfers ownership from one role to another
    if ( 'event.code' starts_with 'GRANT' ) {
        set { dest = 'event.action', value = 'add_permission' }
        if ( 'labels.query' starts_with 'GRANT OWNERSHIP' ) {
            set { dest = 'event.action', value = 'transfer_owner' }
        }
        if ( 'labels.query' starts_with 'GRANT ROLE' ) {
            set { dest = 'event.action', value = 'add_role' }
        }
    }

    # Updates a table by inserting one or more rows
    if ( 'event.code' starts_with 'INSERT' ) {
        set { dest = 'event.action', value = 'update_resource' }
        set { dest = 'resource.type', value = 'table' }
    }

    # Returns a list of files that have been staged (i.e. uploaded from a local file system or unloaded from a table)
    if ( 'event.code' starts_with 'LIST' ) {
        set { dest = 'event.action', value = 'read_resource' }
        set { dest = 'resource.type', value = 'file' }
    }

    # Inserts, updates, and deletes values in a table based on values in a second table
    if ( 'event.code' starts_with 'MERGE' ) {
        set { dest = 'event.action', value = 'update_resource' }
        set { dest = 'resource.type', value = 'table' }
    }

    # Uploads (i.e. stages) data files
    if ( 'event.code' starts_with 'PUT' ) {
        set { dest = 'event.action', value = 'upload_resource' }
        set { dest = 'resource.type', value = 'file' }
    }

    # Removes files from either an external (external cloud storage) or internal (i.e. Snowflake) stage
    if ( 'event.code' starts_with 'REMOVE' ) {
        set { dest = 'event.action', value = 'delete_resource' }
        set { dest = 'resource.type', value = 'file' }
    }

    # Removes one or more privileges from a role, share, or user
    if ( 'event.code' starts_with 'REVOKE' ) {
        set { dest = 'event.action', value = 'remove_permission' }
        if ( 'labels.query' starts_with 'REVOKE ROLE' ) {
            set { dest = 'event.action', value = 'remove_role' }
        }
    }

    # SELECT can be used as either a statement or as a clause within other statements
    if ( 'event.code' starts_with 'SELECT' ) {
        set { dest = 'event.action', value = 'query_resource' }
        set { dest = 'resource.type', value = 'table' }
    }

    # Initializes the value of a session variable
    if ( 'event.code' starts_with 'SET' ) {
        set { dest = 'event.action', value = 'update_resource' }
        set { dest = 'resource.type', value = 'code' }
    }

    # Lists the existing objects for the specified object type
    if ( 'event.code' starts_with 'SHOW' ) {
        set { dest = 'event.action', value = 'read_resource' }
        if ( 'labels.query' starts_with 'SHOW CONNECTION' ) {
            set { dest = 'resource.type', value = 'destination' }
        }
        if ( 'labels.query' starts_with 'SHOW DATABASE' ) {
            set { dest = 'resource.type', value = 'datastore' }
        }
        if ( 'labels.query' starts_with 'SHOW EXTERNAL TABLE' ) {
            set { dest = 'resource.type', value = 'table' }
        }
        if ( 'labels.query' starts_with 'SHOW GLOBAL ACCOUNTS' ) {
            set { dest = 'event.action', value = 'read_account' }
        }
        if ( 'labels.query' starts_with 'SHOW INTEGRATION' ) {
            set { dest = 'resource.type', value = 'application' }
        }
        if ( 'labels.query' starts_with 'SHOW MANAGED ACCOUNT' ) {
            set { dest = 'event.action', value = 'read_account' }
        }
        if ( 'labels.query' starts_with 'SHOW MASKING POLICY' ) {
            set { dest = 'event.action', value = 'read_policy' }
        }
        if ( 'labels.query' starts_with 'SHOW MATERIALIZED VIEW' ) {
            set { dest = 'resource.type', value = 'table' }
        }
        if ( 'labels.query' starts_with 'SHOW ORGANIZATION ACCOUNTS' ) {
            set { dest = 'event.action', value = 'read_account' }
        }
        if ( 'labels.query' starts_with 'SHOW NETWORK POLICY' ) {
            set { dest = 'event.action', value = 'read_policy' }
        }
        if ( 'labels.query' starts_with 'SHOW ROLE' ) {
            set { dest = 'event.action', value = 'read_role' }
        }
        if ( 'labels.query' starts_with 'SHOW ROW ACCESS POLICY' ) {
            set { dest = 'event.action', value = 'read_policy' }
        }
        if ( 'labels.query' starts_with 'SHOW SCHEMA' ) {
            set { dest = 'resource.type', value = 'code' }
        }
        if ( 'labels.query' starts_with 'SHOW SESSION POLICY' ) {
            set { dest = 'event.action', value = 'read_policy' }
        }
        if ( 'labels.query' starts_with 'SHOW SHARE' ) {
            set { dest = 'event.action', value = 'read_share' }
        }
        if ( 'labels.query' starts_with 'SHOW TABLE' ) {
            set { dest = 'resource.type', value = 'table' }
        }
        if ( 'labels.query' starts_with 'SHOW STAGE' ) {
            set { dest = 'resource.type', value = 'datastore' }
        }
        if ( 'labels.query' starts_with 'SHOW TASK' ) {
            set { dest = 'event.action', value = 'read_task' }
        }
        if ( 'labels.query' starts_with 'SHOW USER' ) {
            set { dest = 'event.action', value = 'read_user' }
        }
        if ( 'labels.query' starts_with 'SHOW VIEW' ) {
            set { dest = 'resource.type', value = 'table' }
        }
        if ( 'labels.query' starts_with 'SHOW WAREHOUSE' ) {
            set { dest = 'resource.type', value = 'datastore' }
        }
    }

    # Removes all rows from a view or table
    if ( 'event.code' starts_with 'TRUNCATE' ) {
        set { dest = 'event.action', value = 'delete_resource' }
        set { dest = 'resource.type', value = 'table' }
    }

    # Restores the specified object to the system
    if ( 'event.code' starts_with 'UNDROP' ) {
        set { dest = 'event.action', value = 'restore_resource' }
        if ( 'labels.query' starts_with 'UNDROP DATABASE' ) {
            set { dest = 'resource.type', value = 'datastore' }
        }
        if ( 'labels.query' starts_with 'UNDROP SCHEMA' ) {
            set { dest = 'resource.type', value = 'code' }
        }
        if ( 'labels.query' starts_with 'UNDROP TABLE' ) {
            set { dest = 'resource.type', value = 'table' }
        }
    }

    # Drops a session variable
    if ( 'event.code' starts_with 'UNSET' ) {
        set { dest = 'event.action', value = 'update_resource' }
        set { dest = 'resource.type', value = 'code' }
    }

    # Updates specified rows in the target table
    if ( 'event.code' starts_with 'UPDATE' ) {
        set { dest = 'event.action', value = 'update_resource' }
        set { dest = 'resource.type', value = 'table' }
    }

    # Removes one or more privileges from a role, share, or user
    if ( 'event.code' starts_with 'USE' ) {
        set { dest = 'event.action', value = 'update_session' }
    }

    # Rolls back an open transaction in the current session.
    if ( 'event.code' == 'ROLLBACK' ) {
        set { dest = 'event.action', value = 'update_resource' }
    }

    # Calls a stored procedure
    if ( 'event.code' == 'CALL' or 'event.code' == 'EXECUTE_TASK' ) {
        set { dest = 'event.action', value = 'execute_task' }
    }

    # Modifies the properties, columns, or constraints for an existing resource
    if ( 'event.code' starts_with 'RENAME' ) {
        set { dest = 'event.action', value = 'update_resource' }
    }

    # Copy data from a table into an internal or external stage
    if ( 'event.code' == 'UNLOAD' ) {
        set { dest = 'event.action', value = 'copy_resource' }
    }

    # Commits an open transaction in the current session.
    if ( 'event.code' == 'COMMIT' ) {
        set { dest = 'event.action', value = 'update_resource' }
    }
}
# End QUERY_HISTORY

# Start SESSIONS
if ( 'temp_login_history_flag' not exists and 'temp_query_history_flag' not exists and 'raw_event_data.SESSION_ID' exists and 'raw_event_data.CLOSED_REASON' exists) {
    # https://docs.snowflake.com/en/sql-reference/account-usage/sessions
    copy { src = 'raw_event_data', dest = 'snowflake.session' }

    set { dest = 'event.action', value = 'end_session' }
    date { src = 'raw_event_data.CREATED_ON' }
    rename { src = 'raw_event_data.SESSION_ID', dest = 'session.id' }
    rename { src = 'raw_event_data.USER_NAME', dest = 'user.name'}
    rename { src = 'raw_event_data.LOGIN_EVENT_ID', dest = 'event.id'}
    rename { src = 'raw_event_data.AUTHENTICATION_METHOD', dest = 'authentication.raw_method'}
    rename { src = 'raw_event_data.CLOSED_REASON', dest='event.reason'}

    rename { src = 'raw_event_data.CLIENT_BUILD_ID', dest = 'labels.client_build_id' }
    rename { src = 'raw_event_data.CLIENT_ENVIRONMENT', dest = 'labels.client_environment' }
    rename { src = 'raw_event_data.CLIENT_VERSION', dest = 'labels.client_version' }

}
# End SESSIONS

# Map authentication methods
translate {
    src = 'authentication.raw_method'
    dest = 'authentication.method'
    map = {
        'ID_TOKEN' = 'access_token'
        'OAUTH_ACCESS_TOKEN' = 'access_token'
        'PASSWORD' = 'password'
        'RSA_KEYPAIR' = 'access_token'
        'SAML2_ASSERTION' = 'sso'
    }
}

# Clean up flags
del { src = 'temp_login_history_flag' }
del { src = 'temp_query_history_flag' }
