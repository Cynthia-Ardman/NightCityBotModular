copy { src = 'raw_event_data', dest = 'snow.sysevent'}
set { dest = 'appomni.service.type', value = 'snow' }

date { src = 'raw_event_data.sys_created_on'}

rename { src = 'raw_event_data.sys_id', dest ='event.id'}
rename { src = 'raw_event_data.user_name', dest ='user.name'}
#rename { src = 'raw_event_data.user_id', dest ='user.id'}
rename { src = 'raw_event_data.instance', dest = 'resource.id'}

copy { src = 'raw_event_data.name', dest = 'event.code'}
copy { src = 'raw_event_data.table', dest = 'labels.table'}

if ('raw_event_data.name' == 'password.reset.url') {
  set { dest = 'message', value = 'user\'s password reset URL is sent'}
  set { dest = 'labels.table', value = 'sys_user'}
  rename { src = 'raw_event_data.sys_created_by', dest ='user.name'}
  rename { src = 'raw_event_data.user_id', dest = 'user.target.id'}
  set { dest = 'resource.type', value = 'email'}
}

translate {
  src = 'raw_event_data.name'
  dest = 'event.action'
  default = 'unknown'
  map = {
    'aetna.incident.resolved' = 'end_task'
    'ais_index' = 'create_index'
    'antivirus.infected' = 'alert_resource'
    'approval.cancelled' = 'cancel_review'
    'approval.email.errorMsg' = 'notify_issue'
    'approval.inserted' = 'submit_review'
    'approval.rejected' = 'close_review'
    'approval.rejected.by.other' = 'close_review'
    'appsec.notification.export' = 'notify_issue'
    'appsec.notification.hp_role_added' = 'notify_issue'
    'appsec.notification.security.elevation' = 'notify_issue'
    'appsec.security.export' = 'download_resource'
    'assessment.overdue' = 'notify_workflow'
    'assessment.received' = 'notify_workflow'
    'assessment.reminder' = 'notify_workflow'
    'asset.restock' = 'notify_issue'
    'attachment.read' = 'read_resource'
    'attachment.renamed' = 'update_resource'
    'attachment.uploaded' = 'upload_resource'
    'automation.vcenter' = 'execute_task'
    'awa-reevaluation' = 'verify_resource'
    'awa-workload' = 'execute_task'
    'case.assigned' = 'add_resource'
    'case.assigned.to.group' = 'add_resource'
    'case.updated' = 'update_resource'
    'catalog_channel_analytics.usage' = 'update_resource'
    'change.assigned' = 'add_resource'
    'change.complete' = 'end_resource'
    'change.inserted' = 'add_resource'
    'change.risk.1' = 'update_resource'
    'change.updated' = 'update_resource'
    'change_task.assigned' = 'add_resource'
    'change_task.assigned.to.group' = 'add_resource'
    'ci.change.unplanned' = 'update_resource'
    'cmdb.dm.task.approval' = 'request_review'
    'cmdbdatamanager.tasks.created' = 'create_task'
    'collaboration.new_offline_message' = 'notify_issue'
    'collaboration.notify_offline_user.group' = 'notify_issue'
    'connect.batch_push_notifications' = 'notify_issue'
    'dashboard.sharing.notification' = 'share_resource'
    'dashboard.view' = 'read_resource'
    'discovery.canceled' = 'update_resource'
    'discovery.complete' = 'complete_task'
    'discovery.device.adm.mapping_complete' = 'read_device'
    'discovery.device.adm.mapping_started' = 'read_device'
    'discovery.device.complete' = 'update_resource'
    'discovery.device.post.complete' = 'update_resource'
    'discovery.error' = 'open_issue'
    'discovery.phase.complete' = 'complete_task'
    'email.read' = 'read_resource'
    'email.trigger_read' = 'read_resource'
    'empty_acl_bouncer.complete' = 'complete_task'
    'external.authentication.failed' = 'authenticate_user'
    'external.authentication.succeeded' = 'authenticate_user'
    'feedback.overdue.notification' = 'notify_issue'
    'flow.fire' = 'notify_workflow'
    'incident.assigned' = 'update_task'
    'incident.assigned.to.group' = 'add_resource'
    'incident.closure.event' = 'end_task'
    'incident.commented' = 'create_comment'
    'incident.inactive' = 'update_status'
    'incident.inactivity' = 'update_status'
    'incident.inserted' = 'start_task'
    'incident.resolved' = 'end_task'
    'incident.state.resolved' = 'update_resource'
    'incident.updated' = 'update_resource'
    'kb.use' = 'read_resource'
    'kb.view' = 'read_resource'
    'kb_feedback_task.reassigned' = 'add_resource'
    'kb_knowledge.approval.inserted' = 'approve_resource'
    'label.check.insert' = 'verify_resource'
    'label.check.remove' = 'verify_resource'
    'ldap.connection_failed' = 'connect_user'
    'ldap.operational_status.down' = 'update_status'
    'ldap.operational_status.up' = 'update_status'
    'live_feed.feed_member.left' = 'disconnect_user'
    'live_feed.update' = 'update_resource'
    'live_message.mentioned' = 'update_comment'
    'login' = 'login_user'
    'login.failed' = 'login_user'
    'logout' = 'logout_user'
    'metric.update' = 'update_resource'
    'mid_server.cluster.down' = 'update_status'
    'mid_server.down' = 'update_status'
    'mid_server.up' = 'update_status'
    'ml_solution.training.successful' = 'complete_task'
    'notification_engine.process' = 'execute_request'
    'notification_provider.process' = 'execute_request'
    'on.demand.app.lifecycle' = 'update_app'
    'pa.dc.collect.key_influencer' = 'complete_task'
    'pa.dc.collect.predictive.completed' = 'complete_task'
    'pa.delete.indicator' = 'delete_resource'
    'pa.delete.indicator_breakdown' = 'delete_resource'
    'pa.job.dc.ended.ok' = 'end_task'
    'pa.job.dc.ended.with.error' = 'end_task'
    'pa.job.dc.ended.with.warning' = 'end_task'
    'pa.job.indicator.notification' = 'notify_issue'
    'password.reset.url' = 'reset_password'
    'physical_connections.create' = 'create_resource'
    'plugin.upgraded' = 'enable_app'
    'problem.assigned' = 'add_resource'
    'problem.assigned.to.group' = 'add_resource'
    'problem.inactivity' = 'notify_issue'
    'problem.inserted' = 'create_issue'
    'problem.state_change' = 'update_issue'
    'problem.updated' = 'update_issue'
    'problem_task.assigned' = 'add_resource'
    'problem_task.assigned.to.group' = 'add_resource'
    'problem_task.inserted' = 'create_task'
    'problem_task.state.changed' = 'update_task'
    'problem_task.updated' = 'update_task'
    'problem_task.worknoted' = 'update_task'
    'pwd.reset.identify.error.notification' = 'notify_issue'
    'pwd.send_verify_code.trigger' = 'reset_password'
    'record.send_survey' = 'create_resource'
    'release_feature.assigned' = 'add_resource'
    'rename.colliding_private_labels' = 'update_label'
    'report.view' = 'read_audit'
    'report.view.homepage' = 'read_audit'
    'req_item.desc_updated_assigned_updated' = 'update_resource'
    'request.approval.cancelled' = 'cancel_review'
    'request.approval.inserted' = 'request_review'
    'request.approval.rejected' = 'close_review'
    'roster_group_member.deleted' = 'remove_user'
    'rota.on_call.reminder' = 'update_resource'
    'running.process.absent' = 'update_status'
    'sc_cart_item.multi_row.orphan.delete' = 'delete_resource'
    'sc_req_item.assigned' = 'add_resource'
    'sc_req_item.assigned' = 'update_resource'
    'sc_req_item.change.stage' = 'update_status'
    'sc_req_item.commented' = 'update_resource'
    'sc_req_item.commented.itil' = 'create_comment'
    'sc_req_item.updated' = 'update_resource'
    'sc_request.approved' = 'update_resource'
    'sc_request.assigned' = 'add_resource'
    'sc_request.assigned' = 'update_resource'
    'sc_request.updated' = 'update_resource'
    'sc_task.assigned.to.group' = 'add_resource'
    'sc_task.assigned.to.user' = 'update_task'
    'sc_task.state.changed' = 'update_status'
    'sc_task.updated' = 'update_task'
    'sc_task.worknoted' = 'create_comment'
    'sc_variable.update.references' = 'update_code'
    'scheduled_import_set.completed' = 'complete_task'
    'session.established' = 'start_session'
    'sla.change.second_escalation' = 'update_resource'
    'sla.warning' = 'notify_issue'
    'sn_appclient.update.system.property' = 'update_setting'
    'sn_bm_client.download.scores' = 'download_resource'
    'sn_change_cab.group_member.added' = 'add_user'
    'sn_change_cab.group_member.removed' = 'remove_user'
    'sn_change_cab.meeting.attendee.invite' = 'invite_user'
    'sn_change_cab.meeting.cab_board.invite' = 'invite_user'
    'sn_change_cab.meeting.delegate.invite' = 'invite_user'
    'sn_change_cab.shareMeetingNotes' = 'share_resource'
    'sn_employee.refresh.employee.app.access' = 'update_access'
    'sn_ex_emp_fd.translation.app.update' = 'update_resource'
    'sn_ex_sp.translation.app.update' = 'update_resource'
    'sn_hr_core_case.updated' = 'update_resource'
    'sn_itsm_va.incident.comments.added' = 'create_comment'
    'sn_me.translation.app.update' = 'update_resource'
    'sn_me_assets.translation.app.update' = 'update_resource'
    'sn_me_search.translation.app.update' = 'update_resource'
    'sn_me_todos.translation.app.update' = 'update_resource'
    'sn_scmobile.translation.app.update' =  'update_resource'
    'sn_vsc.sc_security_export' = 'download_resource'
    'snc.subscription.download.completed' = 'download_resource'
    'std_change_proposal.approval.inserted' = 'create_request'
    'sync_ot_asset_ip_address' = 'update_resource'
    'sys_user.delete' = 'delete_user'
    'sys_user.insert' = 'add_user'
    'sys_user_grmember.delete' = 'delete_user'
    'sys_user_grmember.insert' = 'add_user'
    'task.approved' = 'approve_request'
    'task.rejected' = 'update_task'
    'transaction.cancelled' = 'update_resource'
    'trigger_rule.cancel_workflow_context' = 'update_workflow'
    'Trigger-update_incedent' = 'update_resource'
    'ua.customtable.insert' = 'add_resource'
    'update.operation.complete' = 'install_app'
    'user.view' = 'read_user'
    'va.message' = 'update_resource'
    'VCenterVmStateUpdater.processed' = 'update_resource'
    'vtb_card.send.laneupdate' = 'update_resource'
  }
}

  if ('raw_event_data.name' == 'text_index') {
    rename { src = 'raw_event_data.table', dest ='resource.name'}
    if ('raw_event_data.parm2' == 'update') {
      set { dest = 'event.action', value ='update_index'}
      rename { src = 'raw_event_data.parm1', dest ='resource.name'}
    }
    if ('raw_event_data.parm2' == 'insert') {
      set { dest = 'event.action', value ='update_index'}
      rename { src = 'raw_event_data.parm1', dest = 'resource.name'}
    }
    if ('raw_event_data.parm2' == 'delete') {
      set { dest = 'event.action', value ='delete_index'}
      rename { src = 'raw_event_data.parm1', dest ='resource.name'}
    }
  }

  if ('raw_event_data.name' == 'multifactor.auth.token.validation.failed') {
    set { dest = 'event.action', value ='verify_mfa'}
    set { dest = 'message', value = 'Fired when token validation fails when multifactor authentication is enabled'}
    rename { src = 'user_name', dest = 'user.name'}
    rename { src= 'sys_id', dest ='labels.system_id'}
    rename { src = 'raw_event_data.parm1', dest = 'user.target.name'}
    rename { src= 'user_id', dest = 'user.target.id'}
    set { dest = 'event.outcome', value ='failure'}
    rename { src = 'raw_event_data.user_id', dest ='user.id'}
  }

  if ('raw_event_data.name' == 'external.authentication.failed') {
    set { dest = 'event.outcome', value = 'failure'}
    set { dest = 'authentication.raw_method', value = 'external_idp'}
    set { dest = 'authentication.method', value = 'sso'}
    rename { src = 'raw_event_data.user_id', dest = 'user.id'}
  }

  if ('raw_event_data.name' == 'external.authentication.succeeded') {
    set { dest = 'event.outcome', value = 'success'}
    set { dest = 'authentication.raw_method', value = 'external_idp'}
    set { dest = 'authentication.method', value = 'sso'}
    rename { src = 'raw_event_data.user_id', dest = 'user.id'}
  }

  if ('raw_event_data.name' == 'alm_transfer_order_line_subtask.escalati') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'alm_transfer_order_line_subtask'}
  }

  if ('raw_event_data.name' == 'alm_transfer_order_line_subtask.inactivi') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'alm_transfer_order_line_subtask'}
  }

  if ('raw_event_data.name' == 'alm_transfer_order_line_task.escalation.') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'alm_transfer_order_line_task'}
  }

  if ('raw_event_data.name' == 'alm_transfer_order_line_task.inactivity') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'alm_transfer_order_line_task'}
  }

  if ('raw_event_data.name' == 'antivirus.infected') {
    set { dest = 'message', value = 'Event to be fired whenever an file is found infected on scanning.'}
  }

  if ('raw_event_data.name' == 'approval.cancelled') {
    set { dest = 'message', value = 'An approval request has been cancelled'}
    set { dest = 'labels.table', value = 'sysapproval_approver'}
  }

  if ('raw_event_data.name' == 'approval.email.errorMsg') {
    set { dest = 'message', value = 'Send error message back to user if the approval wasn\'t triggering.'}
    set { dest = 'labels.table', value = 'sysevent_in_email_action'}
  }

  if ('raw_event_data.name' == 'approval.inserted') {
    set { dest = 'message', value = 'An approval request has been inserted asking for an approval of a task'}
    set { dest = 'labels.table', value = 'sysapproval_approver'}
  }

  if ('raw_event_data.name' == 'approval.rejected.by.other') {
    set { dest = 'message', value = 'Tell other approvers that at least one approver has rejected this change'}
    set { dest = 'labels.table', value = 'sysapproval_approver'}
  }

  if ('raw_event_data.name' == 'approval.rejected') {
    set { dest = 'message', value = 'The task has been rejected by the approver'}
    set { dest = 'labels.table', value = 'sysapproval_approver'}
  }

  if ('raw_event_data.name' == 'appsec.domain.notification') {
    set { dest = 'message', value = 'Event will send email notification to defined user.'}
    set { dest = 'labels.table', value = 'appsec_domain_result_set'}
  }

  if ('raw_event_data.name' == 'appsec.notification.hp_role_added') {
    set { dest = 'message', value = 'This event will fire if a high privilege role has been added to a user'}
  }

  if ('raw_event_data.name' == 'appsec.notification.impersonation') {
    set { dest = 'message', value = 'This event will be fired to trigger an email notification for the high privilege user impersonated'}
  }

  if ('raw_event_data.name' == 'appsec.notification.login.failed') {
    set { dest = 'message', value = 'This event will be fired to trigger an email notification after X or more failed login attempts made'}
  }

  if ('raw_event_data.name' == 'appsec.notification.login.new_ip') {
    set { dest = 'message', value = 'This event will be fired to trigger an email notification after a high privilege login from new ip'}
  }

  if ('raw_event_data.name' == 'appsec.notification.security.elevation') {
    set { dest = 'message', value = 'This event will be fired for evey user subscribed when a user becomes security_admin'}
  }

  if ('raw_event_data.name' == 'appsec.notification.weekly_digest') {
    set { dest = 'message', value = 'This notification will be fired by the scheduled job to send a weekly digest of security information'}
  }

  if ('raw_event_data.name' == 'assessment.overdue') {
    set { dest = 'message', value = 'Fired by workflow when an assessment is overdue'}
    set { dest = 'labels.table', value = 'asmt_assessment_instance'}
  }

  if ('raw_event_data.name' == 'assessment.received') {
    set { dest = 'message', value = 'Fired by workflow when an assessment is assigned to a user'}
    set { dest = 'labels.table', value = 'asmt_assessment_instance'}
  }

  if ('raw_event_data.name' == 'assessment.reminder') {
    set { dest = 'message', value = 'Fired by workflow when an assessment is seven days from due date'}
    set { dest = 'labels.table', value = 'asmt_assessment_instance'}
  }

  if ('raw_event_data.name' == 'asset.restock') {
    set { dest = 'message', value = 'Sends an email to the manager of the stockroom for restocking the asset'}
    set { dest = 'labels.table', value = 'alm_asset'}
  }

  if ('raw_event_data.name' == 'ast_contract.approval.inserted') {
    set { dest = 'message', value = 'A contract approval has been requested'}
    set { dest = 'labels.table', value = 'sysapproval_approver'}
  }

  if ('raw_event_data.name' == 'attachment.deleted') {
    set { dest = 'event.action', value ='delete_resource'}
    rename { src = 'raw_event_data.parm1', dest = 'labels.table'}
    rename { src = 'raw_event_data.instance', dest = 'resource.id'}
    if ('raw_event_data.table' == 'sys_attachment') {
      rename { src = 'raw_event_data.parm2', dest = 'resource.id'}
    }
  }

  if ('raw_event_data.name' == 'attachment.read') {
    set { dest = 'message', value = 'An attachment has been read/downloaded.'}
    set { dest = 'labels.table', value = 'sys_attachment'}
    set { dest = 'event.action', value ='read_resource'}
    rename { src = 'raw_event_data.parm1', dest = 'resource.name'}
    rename { src = 'raw_event_data.instance', dest = 'resource.id'}
    if ('raw_event_data.table' exists) {
      rename { src = 'raw_event_data.table', dest = 'labels.table'}
    }
  }

  if ('raw_event_data.name' == 'attachment.renamed') {
    set { dest = 'message', value = 'An attachment has been renamed.'}
  }

  if ('raw_event_data.name' == 'attachment.uploaded') {
    set { dest = 'message', value = 'An attachment has been uploaded.'}
  }

  if ('raw_event_data.name' == 'automation.vcenter') {
    set { dest = 'message', value = 'Automation event triggered by vCenter'}
    set { dest = 'labels.table', value = 'ecc_queue'}
  }

  if ('raw_event_data.name' == 'business_app_request.escalation.fired') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'business_app_request'}
  }

  if ('raw_event_data.name' == 'business_app_request.escalation.pause') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'business_app_request'}
  }

  if ('raw_event_data.name' == 'business_app_request.escalation.resume') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'business_app_request'}
  }

  if ('raw_event_data.name' == 'business_app_request.escalation.set') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'business_app_request'}
  }

  if ('raw_event_data.name' == 'business_app_request.inactivity') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'business_app_request'}
  }

  if ('raw_event_data.name' == 'ccrTemplate') {
    set { dest = 'message', value = 'Used to identify template notifications that get copied for new Service Categories'}
    set { dest = 'labels.table', value = 'catalog_category_request'}
  }

  if ('raw_event_data.name' == 'cert_follow_on_task.escalation.fired') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'cert_follow_on_task'}
  }

  if ('raw_event_data.name' == 'cert_follow_on_task.escalation.pause') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'cert_follow_on_task'}
  }

  if ('raw_event_data.name' == 'cert_follow_on_task.escalation.resume') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'cert_follow_on_task'}
  }

  if ('raw_event_data.name' == 'cert_follow_on_task.escalation.set') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'cert_follow_on_task'}
  }

  if ('raw_event_data.name' == 'cert_follow_on_task.inactivity') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'cert_follow_on_task'}
  }

  if ('raw_event_data.name' == 'certificate.expired') {
    set { dest = 'message', value = 'X509 certificate has expired'}
    set { dest = 'labels.table', value = 'sys_certificate'}
  }

  if ('raw_event_data.name' == 'certificate.expiring') {
    set { dest = 'message', value = 'X509 certificate is about to expire'}
    set { dest = 'labels.table', value = 'sys_certificate'}
  }

  if ('raw_event_data.name' == 'change.approved') {
    set { dest = 'message', value = 'The change request has been approved'}
    set { dest = 'labels.table', value = 'change_request'}
  }

  if ('raw_event_data.name' == 'change.assigned.to.group') {
    set { dest = 'message', value = 'A change has been assigned to a group'}
    set { dest = 'labels.table', value = 'change_request'}
  }

  if ('raw_event_data.name' == 'change.assigned') {
    set { dest = 'message', value = 'A change has been assigned'}
    set { dest = 'labels.table', value = 'change_request'}
  }

  if ('raw_event_data.name' == 'change.calendar.notify.remove') {
    set { dest = 'message', value = ''}
    set { dest = 'labels.table', value = 'change_request'}
  }

  if ('raw_event_data.name' == 'change.calendar.notify') {
    set { dest = 'message', value = ''}
    set { dest = 'labels.table', value = 'change_request'}
  }

  if ('raw_event_data.name' == 'change.commented') {
    set { dest = 'message', value = 'The change request has been commented'}
    set { dest = 'labels.table', value = 'change_request'}
  }

  if ('raw_event_data.name' == 'change.complete') {
    set { dest = 'message', value = 'A change has been closed and completed'}
    set { dest = 'labels.table', value = 'change_request'}
  }

  if ('raw_event_data.name' == 'change.inserted') {
    set { dest = 'message', value = 'A change has been inserted'}
    set { dest = 'labels.table', value = 'change_request'}
  }

  if ('raw_event_data.name' == 'change.priority.1') {
    set { dest = 'message', value = 'A change has been given priority 1'}
    set { dest = 'labels.table', value = 'change_request'}
  }

  if ('raw_event_data.name' == 'change.refresh_impacted_ci') {
    set { dest = 'message', value = ''}
    set { dest = 'labels.table', value = 'change_request'}
  }

  if ('raw_event_data.name' == 'change.rejected') {
    set { dest = 'message', value = 'The change request has been rejected'}
    set { dest = 'labels.table', value = 'change_request'}
  }

  if ('raw_event_data.name' == 'change.risk.1') {
    set { dest = 'message', value = 'A change has been given risk 1'}
    set { dest = 'labels.table', value = 'change_request'}
  }

  if ('raw_event_data.name' == 'change.updated') {
    set { dest = 'message', value = 'A change has been updated'}
    set { dest = 'labels.table', value = 'change_request'}
  }

  if ('raw_event_data.name' == 'change.worknoted') {
    set { dest = 'message', value = 'The change request had a worknote added'}
    set { dest = 'labels.table', value = 'change_request'}
  }

  if ('raw_event_data.name' == 'change_phase.escalation.fired') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'change_phase'}
  }

  if ('raw_event_data.name' == 'change_phase.escalation.pause') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'change_phase'}
  }

  if ('raw_event_data.name' == 'change_phase.escalation.resume') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'change_phase'}
  }

  if ('raw_event_data.name' == 'change_phase.escalation.set') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'change_phase'}
  }

  if ('raw_event_data.name' == 'change_phase.inactivity') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'change_phase'}
  }

  if ('raw_event_data.name' == 'change_request.escalation.fired') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'change_request'}
  }

  if ('raw_event_data.name' == 'change_request.escalation.pause') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'change_request'}
  }

  if ('raw_event_data.name' == 'change_request.escalation.resume') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'change_request'}
  }

  if ('raw_event_data.name' == 'change_request.escalation.set') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'change_request'}
  }

  if ('raw_event_data.name' == 'change_request.inactivity') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'change_request'}
  }

  if ('raw_event_data.name' == 'change_request_imac.escalation.fired') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'change_request_imac'}
  }

  if ('raw_event_data.name' == 'change_request_imac.escalation.pause') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'change_request_imac'}
  }

  if ('raw_event_data.name' == 'change_request_imac.escalation.resume') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'change_request_imac'}
  }

  if ('raw_event_data.name' == 'change_request_imac.escalation.set') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'change_request_imac'}
  }

  if ('raw_event_data.name' == 'change_request_imac.inactivity') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'change_request_imac'}
  }

  if ('raw_event_data.name' == 'change_task.assigned.to.group') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'change_task'}
  }

  if ('raw_event_data.name' == 'change_task.assigned') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'change_task'}
  }

  if ('raw_event_data.name' == 'change_task.escalation.fired') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'change_task'}
  }

  if ('raw_event_data.name' == 'change_task.escalation.pause') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'change_task'}
  }

  if ('raw_event_data.name' == 'change_task.escalation.resume') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'change_task'}
  }

  if ('raw_event_data.name' == 'change_task.escalation.set') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'change_task'}
  }

  if ('raw_event_data.name' == 'change_task.inactivity') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'change_task'}
  }

  if ('raw_event_data.name' == 'change_task.worknoted') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'change_task'}
  }

  if ('raw_event_data.name' == 'chat_queue_entry.escalation.fired') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'chat_queue_entry'}
  }

  if ('raw_event_data.name' == 'chat_queue_entry.escalation.pause') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'chat_queue_entry'}
  }

  if ('raw_event_data.name' == 'chat_queue_entry.escalation.resume') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'chat_queue_entry'}
  }

  if ('raw_event_data.name' == 'chat_queue_entry.escalation.set') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'chat_queue_entry'}
  }

  if ('raw_event_data.name' == 'chat_queue_entry.inactivity') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'chat_queue_entry'}
  }

  if ('raw_event_data.name' == 'ci.affected') {
    set { dest = 'message', value = 'A configuration item is being affected by a task'}
    set { dest = 'labels.table', value = 'task_ci'}
  }

  if ('raw_event_data.name' == 'ci.change.unplanned') {
    set { dest = 'message', value = 'Invoked when a CI update occurs with no related open change.'}
  }

  if ('raw_event_data.name' == 'cluster.node.crash') {
    set { dest = 'message', value = 'A cluster node appears to have crashed'}
  }

  if ('raw_event_data.name' == 'cmdb.cimodel.class.created') {
    set { dest = 'message', value = 'Notify a class was created by the CI Class Manager'}
  }

  if ('raw_event_data.name' == 'cmdb.group.modified') {
    set { dest = 'message', value = 'Notify that CMDB Group was updated/deleted by User'}
  }

  if ('raw_event_data.name' == 'cmdb.unscheduled.change') {
    set { dest = 'message', value = 'Unscheduled modification to a Configuration Item'}
    set { dest = 'labels.table', value = 'cmdb_ci'}
  }

  if ('raw_event_data.name' == 'cmdb_multisource_recomp_task.escalation.') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'cmdb_multisource_recomp_task'}
  }

  if ('raw_event_data.name' == 'cmdb_multisource_recomp_task.inactivity') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'cmdb_multisource_recomp_task'}
  }

  if ('raw_event_data.name' == 'codereview.update') {
    set { dest = 'message', value = 'code review update'}
    set { dest = 'labels.table', value = 'sys_sync_history'}
  }

  if ('raw_event_data.name' == 'collaboration.new_offline_message') {
    set { dest = 'message', value = 'A message was sent to a user who was not online'}
  }

  if ('raw_event_data.name' == 'collaboration.notify_offline_user.group') {
    set { dest = 'message', value = 'Sent when offline users have recieved one or more messages to email them. (Group Edition)'}
    set { dest = 'labels.table', value = 'live_message'}
  }

  if ('raw_event_data.name' == 'collaboration.notify_offline_user') {
    set { dest = 'message', value = 'Sent when offline users have recieved one or more messages to email them.'}
    set { dest = 'labels.table', value = 'live_message'}
  }

  if ('raw_event_data.name' == 'communicate.fix') {
    set { dest = 'message', value = 'This event is fired when the fix is communicated for a Problem record'}
    set { dest = 'labels.table', value = 'problem'}
  }

  if ('raw_event_data.name' == 'communicate.workaround') {
    set { dest = 'message', value = 'This event is fired when workaround is communicated for a Problem record'}
    set { dest = 'labels.table', value = 'problem'}
  }

  if ('raw_event_data.name' == 'connect.batch_push_notifications') {
    set { dest = 'message', value = 'Event used to batch excessive push notifications together'}
    set { dest = 'labels.table', value = 'live_message'}
  }

  if ('raw_event_data.name' == 'connect.newmessage') {
    set { dest = 'message', value = ''}
    set { dest = 'labels.table', value = 'live_message'}
  }

  if ('raw_event_data.name' == 'contract.expiration') {
    set { dest = 'message', value = 'A contract is expiring soon - event.param1 = sys_id of expiration, event.param2 = name of expiration'}
    set { dest = 'labels.table', value = 'ast_contract'}
  }

  if ('raw_event_data.name' == 'convert_cmdb_service') {
    set { dest = 'message', value = ''}
    set { dest = 'labels.table', value = 'cmdb_convert_bulk_services_entry'}
  }

  if ('raw_event_data.name' == 'cost_center.affected') {
    set { dest = 'message', value = 'A cost center is being affected by a task'}
    set { dest = 'labels.table', value = 'incident'}
  }

  if ('raw_event_data.name' == 'dashboard.sharing.notification') {
    set { dest = 'message', value = 'Created when a dashboard is shared'}
    set { dest = 'labels.table', value = 'pa_dashboards'}
  }

  if ('raw_event_data.name' == 'discovery.complete') {
    set { dest = 'message', value = 'Event fired when a Discovery schedule is complete (parm1 = status name, parm2 = schedule name)'}
    set { dest = 'labels.table', value = 'discovery_status'}
  }

  if ('raw_event_data.name' == 'discovery.error') {
    set { dest = 'message', value = 'Fired when a SensorProcessor encounters an exception (e.g. AttachmentSizeLimitExceededException)'}
    set { dest = 'labels.table', value = 'ecc_queue'}
  }

  if ('raw_event_data.name' == 'email.read') {
    set { dest = 'message', value = 'An email has been received and read'}
  }

  if ('raw_event_data.name' == 'email.trigger_read') {
    set { dest = 'message', value = 'An email has been received, read and has no Inbound Email Actions associated with it'}
  }

  if ('raw_event_data.name' == 'event.transfer') {
    set { dest = 'message', value = 'Transfer ready/scheduled events into the current rotation'}
    set { dest = 'labels.table', value = 'sysevent'}
  }

  if ('raw_event_data.name' == 'external_app.new_account_link') {
    set { dest = 'message', value = 'Fired when a user completes the confirmation process for an external app'}
    set { dest = 'labels.table', value = 'provider_auth'}
  }

  if ('raw_event_data.name' == 'flow.fire') {
    set { dest = 'message', value = 'Fires when a Flow is ran'}
  }

  if ('raw_event_data.name' == 'glide_list_new_m2m') {
    set { dest = 'message', value = 'Populates M2M backing table for a glide list field'}
  }

  if ('raw_event_data.name' == 'group.affected') {
    set { dest = 'message', value = 'A group is being affected by a task'}
    set { dest = 'labels.table', value = 'incident'}
  }

  if ('raw_event_data.name' == 'gsw_task.escalation.fired') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'gsw_task'}
  }

  if ('raw_event_data.name' == 'gsw_task.escalation.pause') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'gsw_task'}
  }

  if ('raw_event_data.name' == 'gsw_task.escalation.resume') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'gsw_task'}
  }

  if ('raw_event_data.name' == 'gsw_task.escalation.set') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'gsw_task'}
  }

  if ('raw_event_data.name' == 'gsw_task.inactivity') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'gsw_task'}
  }

  if ('raw_event_data.name' == 'impersonation.start') {
    set { dest = 'event.action', value = 'impersonate_user'}
    set { dest = 'event.type', value = ['start']}
    rename { src = 'raw_event_data.parm1', dest = 'user.name'}
    rename { src = 'raw_event_data.parm2', dest = 'user.target.name'}
    rename { src = 'raw_event_data.user_id', dest = 'user.target.id'}
    rename { src = 'user.id', dest = 'user.target.id'}
    set { dest = 'message', value = 'Start of Impersonation'}
    set { dest = 'labels.table', value = 'sys_user'}
  }

  if ('raw_event_data.name' == 'impersonation.end') {
    set { dest = 'event.action', value = 'impersonate_user'}
    set { dest = 'event.type', value = ['end']}
    rename { src = 'raw_event_data.parm1', dest = 'user.name'}
    rename { src = 'raw_event_data.parm2', dest = 'user.target.name'}
    rename { src = 'raw_event_data.user_id', dest = 'user.target.id'}
    rename { src = 'user.id', dest = 'user.target.id'}
    set { dest = 'message', value = 'End of Impersonation'}
    set { dest = 'labels.table', value = 'sys_user'}
  }

  if ('raw_event_data.name' == 'inbound.email_attachments.discarded') {
    set { dest = 'message', value = 'One or more attachments from an inbound email were discarded due to failed constraints'}
    set { dest = 'labels.table', value = 'sys_email'}
  }

  if ('raw_event_data.name' == 'incident.assigned.to.group') {
    set { dest = 'message', value = 'An incident has been assigned to a group'}
    set { dest = 'labels.table', value = 'incident'}
  }

  if ('raw_event_data.name' == 'incident.assigned') {
    set { dest = 'message', value = 'An incident has been assigned to someone'}
    set { dest = 'labels.table', value = 'incident'}
  }

  if ('raw_event_data.name' == 'incident.commented') {
    set { dest = 'message', value = 'Something added to the "Additional Comments" field'}
    set { dest = 'labels.table', value = 'incident'}
  }

  if ('raw_event_data.name' == 'incident.escalated') {
    set { dest = 'message', value = 'An incident has the escalation field incremented'}
    set { dest = 'labels.table', value = 'incident'}
  }

  if ('raw_event_data.name' == 'incident.escalation.fired') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'incident'}
  }

  if ('raw_event_data.name' == 'incident.escalation.pause') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'incident'}
  }

  if ('raw_event_data.name' == 'incident.escalation.resume') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'incident'}
  }

  if ('raw_event_data.name' == 'incident.escalation.set') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'incident'}
  }

  if ('raw_event_data.name' == 'incident.inactive') {
    set { dest = 'message', value = 'An incident has been closed or resolved'}
    set { dest = 'labels.table', value = 'incident'}
  }

  if ('raw_event_data.name' == 'incident.inactivity') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'incident'}
  }

  if ('raw_event_data.name' == 'incident.inserted') {
    set { dest = 'message', value = 'An incident has been inserted'}
    set { dest = 'labels.table', value = 'incident'}
  }

  if ('raw_event_data.name' == 'incident.on_call.device') {
    set { dest = 'message', value = 'On-call device for an assignment group should be notified.'}
    set { dest = 'labels.table', value = 'incident'}
  }

  if ('raw_event_data.name' == 'incident.on_call.escalation.device') {
    set { dest = 'message', value = 'On-call escalation to a device occurred for a particular roster'}
    set { dest = 'labels.table', value = 'incident'}
  }

  if ('raw_event_data.name' == 'incident.on_call.escalation.user') {
    set { dest = 'message', value = 'On-call escalation to a user occurred for a particular roster'}
    set { dest = 'labels.table', value = 'incident'}
  }

  if ('raw_event_data.name' == 'incident.on_call.user') {
    set { dest = 'message', value = 'On-call user for an assignment group should be notified.'}
    set { dest = 'labels.table', value = 'incident'}
  }

  if ('raw_event_data.name' == 'incident.priority.1') {
    set { dest = 'message', value = 'An incident is priority 1 (the highest)'}
    set { dest = 'labels.table', value = 'incident'}
  }

  if ('raw_event_data.name' == 'incident.resolved_by_problem') {
    set { dest = 'message', value = 'This event is raised when the Incident state is changed to resolved when Problem is closed/resolved.'}
    set { dest = 'labels.table', value = 'incident'}
  }

  if ('raw_event_data.name' == 'incident.severity.1') {
    set { dest = 'message', value = 'An incident is severity 1 (the highest)'}
    set { dest = 'labels.table', value = 'incident'}
  }

  if ('raw_event_data.name' == 'incident.updated_by_problem') {
    set { dest = 'message', value = 'This event is triggered when the Problem associated to the Incident is Risk Accepted'}
    set { dest = 'labels.table', value = 'incident'}
  }

  if ('raw_event_data.name' == 'incident.updated') {
    set { dest = 'message', value = 'An incident has been updated in the system'}
    set { dest = 'labels.table', value = 'incident'}
  }

  if ('raw_event_data.name' == 'incident_task.escalation.fired') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'incident_task'}
  }

  if ('raw_event_data.name' == 'incident_task.escalation.pause') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'incident_task'}
  }

  if ('raw_event_data.name' == 'incident_task.escalation.resume') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'incident_task'}
  }

  if ('raw_event_data.name' == 'incident_task.escalation.set') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'incident_task'}
  }

  if ('raw_event_data.name' == 'incident_task.inactivity') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'incident_task'}
  }

  if ('raw_event_data.name' == 'interaction.internal_transcript') {
    set { dest = 'message', value = ''}
    set { dest = 'labels.table', value = 'interaction'}
  }

  if ('raw_event_data.name' == 'itil_appointment.inserted') {
    set { dest = 'message', value = 'An appointment associated with a task has been inserted'}
    set { dest = 'labels.table', value = 'itil_appointment'}
  }

  if ('raw_event_data.name' == 'itil_appointment.updated') {
    set { dest = 'message', value = 'An appointment associated with a task has been updated'}
    set { dest = 'labels.table', value = 'itil_appointment'}
  }

  if ('raw_event_data.name' == 'jwt.key.expired') {
    set { dest = 'message', value = 'Event for Sending Email for Expired JWT Keys'}
    set { dest = 'labels.table', value = 'jwt_keystore_aliases'}
  }

  if ('raw_event_data.name' == 'jwt.key.expiring') {
    set { dest = 'message', value = 'Event for Sending Email for Expiring JWT Keys'}
    set { dest = 'labels.table', value = 'jwt_keystore_aliases'}
  }

  if ('raw_event_data.name' == 'kb.article.expiry.warning') {
    set { dest = 'message', value = 'Send email to KB owner, managers, AOG and article author/reviser for expiring articles'}
    set { dest = 'labels.table', value = 'kb_knowledge'}
  }

  if ('raw_event_data.name' == 'kb.submission.closed_created') {
    set { dest = 'message', value = 'A KB submission has been closed after generating articles'}
    set { dest = 'labels.table', value = 'kb_submission'}
  }

  if ('raw_event_data.name' == 'kb.submission.closed_duplicate') {
    set { dest = 'message', value = 'A KB submission has been rejected as it was a duplicate'}
    set { dest = 'labels.table', value = 'kb_submission'}
  }

  if ('raw_event_data.name' == 'kb.submission.closed_invalid') {
    set { dest = 'message', value = 'A KB submission has been rejected as it was determined to be invalid'}
    set { dest = 'labels.table', value = 'kb_submission'}
  }

  if ('raw_event_data.name' == 'kb.submission.submitted') {
    set { dest = 'message', value = 'A new KB submission entry has been created'}
    set { dest = 'labels.table', value = 'kb_submission'}
  }

  if ('raw_event_data.name' == 'kb.use') {
    set { dest = 'message', value = 'Fires when user uses a knowledge record'}
    set { dest = 'labels.table', value = 'kb_knowledge'}
  }

  if ('raw_event_data.name' == 'kb.view') {
    set { dest = 'message', value = 'Fires when user views a knowledge record'}
    set { dest = 'labels.table', value = 'kb_knowledge'}
  }

  if ('raw_event_data.name' == 'kb_feedback.rating.deleted') {
    set { dest = 'message', value = ''}
    set { dest = 'labels.table', value = 'kb_feedback'}
  }

  if ('raw_event_data.name' == 'kb_feedback_task.escalation.fired') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'kb_feedback_task'}
  }

  if ('raw_event_data.name' == 'kb_feedback_task.escalation.pause') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'kb_feedback_task'}
  }

  if ('raw_event_data.name' == 'kb_feedback_task.escalation.resume') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'kb_feedback_task'}
  }

  if ('raw_event_data.name' == 'kb_feedback_task.escalation.set') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'kb_feedback_task'}
  }

  if ('raw_event_data.name' == 'kb_feedback_task.inactivity') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'kb_feedback_task'}
  }

  if ('raw_event_data.name' == 'kb_feedback_task.reassigned') {
    set { dest = 'message', value = ''}
    set { dest = 'labels.table', value = 'kb_feedback_task'}
  }

  if ('raw_event_data.name' == 'kb_feedback_task.resolution_accepted') {
    set { dest = 'message', value = ''}
    set { dest = 'labels.table', value = 'kb_feedback_task'}
  }

  if ('raw_event_data.name' == 'kb_feedback_task.resolution_rejected') {
    set { dest = 'message', value = ''}
    set { dest = 'labels.table', value = 'kb_feedback_task'}
  }

  if ('raw_event_data.name' == 'kb_knowledge.approval.inserted') {
    set { dest = 'message', value = 'This event is triggered when an approval is created for a Knowledge article.'}
    set { dest = 'labels.table', value = 'sysapproval_approver'}
  }

  if ('raw_event_data.name' == 'kb_knowledge_base_request.escalation.fir') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'kb_knowledge_base_request'}
  }

  if ('raw_event_data.name' == 'kb_knowledge_base_request.escalation.pau') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'kb_knowledge_base_request'}
  }

  if ('raw_event_data.name' == 'kb_knowledge_base_request.escalation.res') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'kb_knowledge_base_request'}
  }

  if ('raw_event_data.name' == 'kb_knowledge_base_request.escalation.set') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'kb_knowledge_base_request'}
  }

  if ('raw_event_data.name' == 'kb_knowledge_base_request.inactivity') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'kb_knowledge_base_request'}
  }

  if ('raw_event_data.name' == 'kb_submission.escalation.fired') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'kb_submission'}
  }

  if ('raw_event_data.name' == 'kb_submission.escalation.pause') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'kb_submission'}
  }

  if ('raw_event_data.name' == 'kb_submission.escalation.resume') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'kb_submission'}
  }

  if ('raw_event_data.name' == 'kb_submission.escalation.set') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'kb_submission'}
  }

  if ('raw_event_data.name' == 'kb_submission.inactivity') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'kb_submission'}
  }

  if ('raw_event_data.name' == 'knowledge.approval.approved') {
    set { dest = 'message', value = 'Event is triggered when an article is approved.'}
    set { dest = 'labels.table', value = 'kb_knowledge'}
  }

  if ('raw_event_data.name' == 'knowledge.approval.rejected') {
    set { dest = 'message', value = 'Event is triggered when an article is rejected.'}
    set { dest = 'labels.table', value = 'kb_knowledge'}
  }

  if ('raw_event_data.name' == 'label.check.insert') {
    set { dest = 'message', value = 'Check to see if a newly added record matches any auto label specifications'}
  }

  if ('raw_event_data.name' == 'label.check.notify') {
    set { dest = 'message', value = 'Looks to see if the record has changed in such a way that a user should be notified'}
  }

  if ('raw_event_data.name' == 'label.check.remove') {
    set { dest = 'message', value = 'Check to see if a removed record matches any auto label specifications'}
  }

  if ('raw_event_data.name' == 'label.notify') {
    set { dest = 'message', value = 'Sends out a notification about a record changing'}
  }

  if ('raw_event_data.name' == 'ldap.connection_failed') {
    set { dest = 'message', value = 'LDAP Connection Failed'}
    set { dest = 'labels.table', value = 'ldap_server_config'}
  }

  if ('raw_event_data.name' == 'ldap.operational_status.down') {
    set { dest = 'message', value = 'LDAP URL Operational Status is False'}
    set { dest = 'labels.table', value = 'ldap_server_config'}
  }

  if ('raw_event_data.name' == 'ldap.operational_status.up') {
    set { dest = 'message', value = 'LDAP URL Operational Status is True'}
    set { dest = 'labels.table', value = 'ldap_server_config'}
  }

  if ('raw_event_data.name' == 'license.expiration') {
    set { dest = 'message', value = 'Software license compliance - event.param1 = sys_id of compliance level, event.param2 = name of lvl'}
    set { dest = 'labels.table', value = 'ast_license_base'}
  }

  if ('raw_event_data.name' == 'live_feed.feed_member.accepted') {
    set { dest = 'message', value = 'A User accepted an invitation to join the feed'}
    set { dest = 'labels.table', value = 'live_group_member'}
  }

  if ('raw_event_data.name' == 'live_feed.feed_member.declined') {
    set { dest = 'message', value = 'User declined an invitation to join a feed'}
    set { dest = 'labels.table', value = 'live_group_member'}
  }

  if ('raw_event_data.name' == 'live_feed.feed_member.invited') {
    set { dest = 'message', value = 'A User has been invited to join a feed'}
    set { dest = 'labels.table', value = 'live_group_member'}
  }

  if ('raw_event_data.name' == 'live_feed.feed_member.left') {
    set { dest = 'message', value = 'Active member has left the feed'}
    set { dest = 'labels.table', value = 'live_group_member'}
  }

  if ('raw_event_data.name' == 'live_feed.feed_member.rejected') {
    set { dest = 'message', value = 'An administrator has rejected the user\'s request to join the feed'}
    set { dest = 'labels.table', value = 'live_group_member'}
  }

  if ('raw_event_data.name' == 'live_feed.feed_member.removed') {
    set { dest = 'message', value = 'Admin has removed user from the feed'}
    set { dest = 'labels.table', value = 'live_group_member'}
  }

  if ('raw_event_data.name' == 'live_feed.feed_member.request_accepted') {
    set { dest = 'message', value = 'The administrator has accepted the user\'s request to join the feed'}
    set { dest = 'labels.table', value = 'live_group_member'}
  }

  if ('raw_event_data.name' == 'live_feed.feed_member.request') {
    set { dest = 'message', value = 'A user made a request to join a feed'}
    set { dest = 'labels.table', value = 'live_group_member'}
  }

  if ('raw_event_data.name' == 'live_feed.team_member.accepted') {
    set { dest = 'message', value = 'User accepted invitation to join the live feed team'}
    set { dest = 'labels.table', value = 'live_group_member'}
  }

  if ('raw_event_data.name' == 'live_feed.team_member.declined') {
    set { dest = 'message', value = 'User declined an invitation to join the live feed team'}
    set { dest = 'labels.table', value = 'live_group_member'}
  }

  if ('raw_event_data.name' == 'live_feed.team_member.invited') {
    set { dest = 'message', value = 'User has been invited to join a live feed team'}
    set { dest = 'labels.table', value = 'live_group_member'}
  }

  if ('raw_event_data.name' == 'live_feed.team_member.left') {
    set { dest = 'message', value = 'A previously active member has left the team'}
    set { dest = 'labels.table', value = 'live_group_member'}
  }

  if ('raw_event_data.name' == 'live_feed.team_member.rejected') {
    set { dest = 'message', value = 'The administrator has rejected the user\'s request to join the team'}
    set { dest = 'labels.table', value = 'live_group_member'}
  }

  if ('raw_event_data.name' == 'live_feed.team_member.removed') {
    set { dest = 'message', value = 'Admin has removed the user from the team'}
    set { dest = 'labels.table', value = 'live_group_member'}
  }

  if ('raw_event_data.name' == 'live_feed.team_member.request_accepted') {
    set { dest = 'message', value = 'The administrator has accepted the user\'s request to join the team'}
    set { dest = 'labels.table', value = 'live_group_member'}
  }

  if ('raw_event_data.name' == 'live_feed.team_member.request') {
    set { dest = 'message', value = 'A user made a request to join a live feed team'}
    set { dest = 'labels.table', value = 'live_group_member'}
  }

  if ('raw_event_data.name' == 'live_feed.update') {
    set { dest = 'message', value = 'Update occured on a table the feed is interested in'}
  }

  if ('raw_event_data.name' == 'live_feed.update.async.process') {
    set { dest = 'message', value = 'Asynchronous processing part of the live_feed.update event'}
  }

  if ('raw_event_data.name' == 'live_message.group_inserted') {
    set { dest = 'message', value = 'A new message was created in a group'}
    set { dest = 'labels.table', value = 'live_message'}
  }

  if ('raw_event_data.name' == 'live_message.group_replied') {
    set { dest = 'message', value = 'A new reply message was created in a group'}
    set { dest = 'labels.table', value = 'live_message'}
  }

  if ('raw_event_data.name' == 'live_message.inserted') {
    set { dest = 'message', value = ''}
    set { dest = 'labels.table', value = 'live_message'}
  }

  if ('raw_event_data.name' == 'live_message.mentioned') {
    set { dest = 'message', value = 'Fired when a message has @Mention'}
    set { dest = 'labels.table', value = 'live_mention'}
  }

  if ('raw_event_data.name' == 'live_message.replied') {
    set { dest = 'message', value = ''}
    set { dest = 'labels.table', value = 'live_message'}
  }

  if ('raw_event_data.name' == 'live_message_like.inserted') {
    set { dest = 'message', value = ''}
    set { dest = 'labels.table', value = 'live_message_like'}
  }

  if ('raw_event_data.name' == 'live_poll.closed') {
    set { dest = 'message', value = 'Live Poll Closed Event'}
    set { dest = 'labels.table', value = 'live_poll'}
  }

  if ('raw_event_data.name' == 'loader.tables.processed') {
    set { dest = 'message', value = 'Fired when tables are modified via loading, ie update set, plugin, or an app'}
  }

  if ('raw_event_data.name' == 'location.affected') {
    set { dest = 'message', value = 'A location is being affected by a task'}
    set { dest = 'labels.table', value = 'incident'}
  }

  if ('raw_event_data.name' == 'logfilemonitor.test') {
    set { dest = 'message', value = 'A log file monitor has matched a line'}
  }

  if ('raw_event_data.name' == 'login.authorization.failed') {
    set { dest = 'message', value = 'User authorization login failure'}
    set { dest = 'labels.table', value = 'sys_user'}
  }

  if ('raw_event_data.name' == 'login.failed') {
    set { dest = 'event.outcome', value = 'failure'}
    set { dest = 'message', value = 'Login failed'}
    set { dest = 'labels.table', value = 'sys_user'}

    if ('raw_event_data.tablename' == 'sysevent') {
      set { dest = 'message', value = 'Capture failed logins for security dashboard'}
    }

    rename { src = 'raw_event_data.parm1', dest = 'user.target.name'}
    parse_ip { src = 'raw_event_data.parm2', dest = 'source'}
    rename { src = 'raw_event_data.user_id', dest ='user.id'}
  }

  if ('raw_event_data.name' == 'login') {
    set { dest = 'event.outcome', value = 'success'}
    set { dest = 'message', value = 'Successful login'}
    set { dest = 'labels.table', value = 'sys_user'}

    if ('raw_event_data.tablename' == 'sysevent') {
      set { dest = 'message', value = 'Capture all Admin logins'}
    }

    rename { src = 'raw_event_data.parm1', dest = 'user.target.name'}
    parse_ip { src = 'raw_event_data.parm2', dest = 'source'}
    rename { src = 'raw_event_data.user_id', dest ='user.id'}
  }

  if ('raw_event_data.name' == 'logout') {
    set { dest = 'message', value = 'Successful logout'}
    set { dest = 'labels.table', value = 'sys_user'}
  }

  if ('raw_event_data.name' == 'mail.sent') {
    set { dest = 'message', value = 'An email has been sent'}
  }

  if ('raw_event_data.name' == 'megaphone.insert.message') {
    set { dest = 'message', value = 'Event generated from ServiceNow to insert a megaphone message'}
    set { dest = 'labels.table', value = 'sys_broadcast_message'}
  }

  if ('raw_event_data.name' == 'metric.update') {
    set { dest = 'message', value = 'Metrics for this record need to be updated'}
  }

  if ('raw_event_data.name' == 'mfa.browser.fingerprint.remembered') {
    set { dest = 'message', value = 'Fired when users chooses to remember the browser on MFA code validation page'}
    set { dest = 'labels.table', value = 'multi_factor_browser_fingerprint'}
  }

  if ('raw_event_data.name' == 'mfa.fingerprint.hash.validation.failed') {
    set { dest = 'message', value = 'Fired when fingerprint HMAC sent from browser does not match with HMAC calculated using nonce'}
    set { dest = 'labels.table', value = 'multi_factor_browser_fingerprint'}
  }

  if ('raw_event_data.name' == 'mfa.fingerprint.validation.failed') {
    set { dest = 'message', value = 'Fired when browser fingerprint does not match with saved browser fingerprints '}
    set { dest = 'labels.table', value = 'multi_factor_browser_fingerprint'}
  }

  if ('raw_event_data.name' == 'mfa.token.validation.skipped') {
    set { dest = 'message', value = 'Fired when MFA code validation is skipped for user upon successful browser fingerprint match'}
    set { dest = 'labels.table', value = 'multi_factor_browser_fingerprint'}
  }

  if ('raw_event_data.name' == 'mid.threshold.resource.breach') {
    set { dest = 'message', value = 'mid.threshold.resource.breach'}
  }

  if ('raw_event_data.name' == 'mid_server.cluster.down') {
    set { dest = 'message', value = 'A MID server cluster has failed'}
    set { dest = 'labels.table', value = 'ecc_agent_cluster'}
  }

  if ('raw_event_data.name' == 'mid_server.down') {
    set { dest = 'message', value = 'A MID server has gone down'}
    set { dest = 'labels.table', value = 'ecc_agent'}
  }

  if ('raw_event_data.name' == 'mid_server.paused') {
    set { dest = 'message', value = 'A MID Server has been paused'}
    set { dest = 'labels.table', value = 'ecc_agent'}
  }

  if ('raw_event_data.name' == 'mid_server.up') {
    set { dest = 'message', value = 'A MID server has come up'}
    set { dest = 'labels.table', value = 'ecc_agent'}
  }

  if ('raw_event_data.name' == 'mid_server.upgrade_failed') {
    set { dest = 'message', value = 'A MID server failed to upgrade'}
    set { dest = 'labels.table', value = 'ecc_agent'}
  }

  if ('raw_event_data.name' == 'mid_server.upgrading') {
    set { dest = 'message', value = 'A MID Server is being auto upgraded'}
    set { dest = 'labels.table', value = 'ecc_agent'}
  }

  if ('raw_event_data.name' == 'multifactor.auth.setup.bypass') {
    set { dest = 'message', value = 'When the user bypasses setting up Multifactor Auth. Parm2 is the no. of bypasses left for the user.'}
    set { dest = 'labels.table', value = 'user_multifactor_auth'}
  }

  if ('raw_event_data.name' == 'multifactor.auth.token.validation.failed') {
    set { dest = 'labels.table', value = 'sys_user'}
    set { dest = 'message', value = 'When the user bypasses setting up Multifactor Auth. Parm2 is the no. of bypasses left for the user.' }
    set { dest = 'labels.table', value = 'user_multifactor_auth' }
    set { dest = 'event.action', value = 'alert_mfa' }
  }

  if ('raw_event_data.name' == 'notification_engine.process') {
    set { dest = 'message', value = 'Provides for asynchronous processing of "Run on insert, update, delete" triggered notifications. '}
  }

  if ('raw_event_data.name' == 'oc.time_off.without_approval.created') {
    set { dest = 'message', value = 'Sends notification when manager approval is not needed and a time off is created.'}
    set { dest = 'labels.table', value = 'roster_schedule_span_proposal'}
  }

  if ('raw_event_data.name' == 'orphan_ci_remediation.escalation.fired') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'orphan_ci_remediation'}
  }

  if ('raw_event_data.name' == 'orphan_ci_remediation.escalation.pause') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'orphan_ci_remediation'}
  }

  if ('raw_event_data.name' == 'orphan_ci_remediation.escalation.resume') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'orphan_ci_remediation'}
  }

  if ('raw_event_data.name' == 'orphan_ci_remediation.escalation.set') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'orphan_ci_remediation'}
  }

  if ('raw_event_data.name' == 'orphan_ci_remediation.inactivity') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'orphan_ci_remediation'}
  }

  if ('raw_event_data.name' == 'outage.begin.notif') {
    set { dest = 'message', value = 'Service Portal outage notifications'}
    set { dest = 'labels.table', value = 'cmdb_ci_outage'}
  }

  if ('raw_event_data.name' == 'outage.begin') {
    set { dest = 'message', value = 'Service Portal outage notifications'}
    set { dest = 'labels.table', value = 'cmdb_ci_outage'}
  }

  if ('raw_event_data.name' == 'outage.delete') {
    set { dest = 'message', value = 'Service Portal outage notifications'}
    set { dest = 'labels.table', value = 'cmdb_ci_outage'}
  }

  if ('raw_event_data.name' == 'outage.details.notif') {
    set { dest = 'message', value = 'Service Portal outage notifications'}
    set { dest = 'labels.table', value = 'cmdb_ci_outage'}
  }

  if ('raw_event_data.name' == 'outage.details') {
    set { dest = 'message', value = 'Service Portal outage notifications'}
    set { dest = 'labels.table', value = 'cmdb_ci_outage'}
  }

  if ('raw_event_data.name' == 'outage.end.notif') {
    set { dest = 'message', value = 'Service Portal outage notifications'}
    set { dest = 'labels.table', value = 'cmdb_ci_outage'}
  }

  if ('raw_event_data.name' == 'outage.end') {
    set { dest = 'message', value = 'Service Portal outage notifications'}
    set { dest = 'labels.table', value = 'cmdb_ci_outage'}
  }

  if ('raw_event_data.name' == 'pa.delete.breakdown') {
    set { dest = 'message', value = 'Created when an breakdown is deleted'}
    set { dest = 'labels.table', value = 'pa_breakdowns'}
  }

  if ('raw_event_data.name' == 'pa.delete.indicator_breakdown') {
    set { dest = 'message', value = 'Created when an indicator breakdown is deleted'}
    set { dest = 'labels.table', value = 'pa_indicator_breakdowns'}
  }

  if ('raw_event_data.name' == 'pa.delete.indicator') {
    set { dest = 'message', value = 'Created when an indicator is deleted'}
    set { dest = 'labels.table', value = 'pa_indicators'}
  }

  if ('raw_event_data.name' == 'pa.job.dc.ended.ok') {
    set { dest = 'message', value = 'Data collection job ended successfully'}
    set { dest = 'labels.table', value = 'pa_job_logs'}
  }

  if ('raw_event_data.name' == 'pa.job.dc.ended.with.error') {
    set { dest = 'message', value = 'Data collection job ended with error'}
    set { dest = 'labels.table', value = 'pa_job_logs'}
  }

  if ('raw_event_data.name' == 'pa.job.dc.ended.with.warning') {
    set { dest = 'message', value = 'Data collection job ended with warning'}
    set { dest = 'labels.table', value = 'pa_job_logs'}
  }

  if ('raw_event_data.name' == 'pa.job.forecast.target.notification') {
    set { dest = 'message', value = 'Fired when forecast meets targets defined'}
    set { dest = 'labels.table', value = 'pa_targets'}
  }

  if ('raw_event_data.name' == 'pa.job.indicator.notification') {
    set { dest = 'message', value = 'Used to queue email notifications for indicators in performance analytics'}
  }

  if ('raw_event_data.name' == 'pa.job.target.notification') {
    set { dest = 'message', value = 'Fired after comparing with the actual value'}
    set { dest = 'labels.table', value = 'pa_targets'}
  }

  if ('raw_event_data.name' == 'pa.job.threshold.notification') {
    set { dest = 'message', value = 'Fired when at least one of all the active thresholds is reached'}
    set { dest = 'labels.table', value = 'pa_thresholds'}
  }

  if ('raw_event_data.name' == 'pa.job.threshold.reached') {
    set { dest = 'message', value = 'Fired when a threshold has been reached'}
    set { dest = 'labels.table', value = 'pa_thresholds'}
  }

  if ('raw_event_data.name' == 'password.onetime') {
    set { dest = 'message', value = 'One time password generated'}
    set { dest = 'labels.table', value = 'security_nonce'}
  }

  if ('raw_event_data.name' == 'password.reset') {
    set { dest = 'message', value = 'user\'s password has been reset'}
    set { dest = 'labels.table', value = 'sys_user'}
  }

  if ('raw_event_data.name' == 'plugin.activated') {
    set { dest = 'message', value = 'Fired when a plugin is activated'}
  }

  if ('raw_event_data.name' == 'plugin.upgraded') {
    set { dest = 'message', value = 'Plugin activate or upgraded from the UI or during a zboot or upgrade'}
  }

  if ('raw_event_data.name' == 'problem.assigned.to.group') {
    set { dest = 'message', value = 'A problem has been assigned to a group'}
    set { dest = 'labels.table', value = 'problem'}
  }

  if ('raw_event_data.name' == 'problem.assigned') {
    set { dest = 'message', value = 'A problem has been assigned'}
    set { dest = 'labels.table', value = 'problem'}
  }

  if ('raw_event_data.name' == 'problem.escalated') {
    set { dest = 'message', value = 'A problem has been escalated'}
    set { dest = 'labels.table', value = 'problem'}
  }

  if ('raw_event_data.name' == 'problem.escalation.fired') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'problem'}
  }

  if ('raw_event_data.name' == 'problem.escalation.pause') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'problem'}
  }

  if ('raw_event_data.name' == 'problem.escalation.resume') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'problem'}
  }

  if ('raw_event_data.name' == 'problem.escalation.set') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'problem'}
  }

  if ('raw_event_data.name' == 'problem.fixes') {
    set { dest = 'message', value = ''}
    set { dest = 'labels.table', value = 'problem'}
  }

  if ('raw_event_data.name' == 'problem.inactivity') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'problem'}
  }

  if ('raw_event_data.name' == 'problem.inserted') {
    set { dest = 'message', value = 'A problem has been inserted'}
    set { dest = 'labels.table', value = 'problem'}
  }

  if ('raw_event_data.name' == 'problem.problem_tasks.closed') {
    set { dest = 'message', value = 'This event is fired when all the problem tasks related to a problem closes.'}
    set { dest = 'labels.table', value = 'problem'}
  }

  if ('raw_event_data.name' == 'problem.state_change') {
    set { dest = 'message', value = 'This event is fired whenever there is a change in state of a Problem record'}
    set { dest = 'labels.table', value = 'problem'}
  }

  if ('raw_event_data.name' == 'problem.updated') {
    set { dest = 'message', value = 'A problem has been updated'}
    set { dest = 'labels.table', value = 'problem'}
  }

  if ('raw_event_data.name' == 'problem.worknoted') {
    set { dest = 'message', value = 'A problem has had a worknote added'}
    set { dest = 'labels.table', value = 'problem'}
  }

  if ('raw_event_data.name' == 'problem_task.assigned.to.group') {
    set { dest = 'message', value = 'A problem task has been assigned to a group'}
    set { dest = 'labels.table', value = 'problem_task'}
  }

  if ('raw_event_data.name' == 'problem_task.assigned') {
    set { dest = 'message', value = 'A problem task has been assigned'}
    set { dest = 'labels.table', value = 'problem_task'}
  }

  if ('raw_event_data.name' == 'problem_task.commented') {
    set { dest = 'message', value = 'Something added to the Additional comments field'}
    set { dest = 'labels.table', value = 'problem_task'}
  }

  if ('raw_event_data.name' == 'problem_task.escalation.fired') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'problem_task'}
  }

  if ('raw_event_data.name' == 'problem_task.escalation.pause') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'problem_task'}
  }

  if ('raw_event_data.name' == 'problem_task.escalation.resume') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'problem_task'}
  }

  if ('raw_event_data.name' == 'problem_task.escalation.set') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'problem_task'}
  }

  if ('raw_event_data.name' == 'problem_task.inactivity') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'problem_task'}
  }

  if ('raw_event_data.name' == 'problem_task.inserted') {
    set { dest = 'message', value = 'A problem task has been inserted'}
    set { dest = 'labels.table', value = 'problem_task'}
  }

  if ('raw_event_data.name' == 'problem_task.state.changed') {
    set { dest = 'message', value = 'State has been updated'}
    set { dest = 'labels.table', value = 'problem_task'}
  }

  if ('raw_event_data.name' == 'problem_task.updated') {
    set { dest = 'message', value = 'A problem task has been updated'}
    set { dest = 'labels.table', value = 'problem_task'}
  }

  if ('raw_event_data.name' == 'problem_task.worknoted') {
    set { dest = 'message', value = 'Something added to the Worknotes field'}
    set { dest = 'labels.table', value = 'problem_task'}
  }

  if ('raw_event_data.name' == 'push.invalid_device') {
    set { dest = 'message', value = ''}
    set { dest = 'labels.table', value = 'sys_push_feedback'}
  }

  if ('raw_event_data.name' == 'pwd.activity_monitor.lockout_threshold') {
    set { dest = 'message', value = 'Triggers email when number of users that are lockout is above threshold'}
  }

  if ('raw_event_data.name' == 'pwd.credStore.history.limit.decrease') {
    set { dest = 'message', value = ''}
    set { dest = 'labels.table', value = 'pwd_cred_store'}
  }

  if ('raw_event_data.name' == 'pwd.email.trigger') {
    set { dest = 'message', value = 'Used to trigger an email notification when the pwd_process table\'s email_trigger column is updated'}
    set { dest = 'labels.table', value = 'sys_user'}
  }

  if ('raw_event_data.name' == 'pwd.enrollment_reminder.trigger') {
    set { dest = 'message', value = 'send enrollment reminder for password reset. '}
    set { dest = 'labels.table', value = 'global'}
  }

  if ('raw_event_data.name' == 'pwd.send_verify_code.trigger') {
    set { dest = 'message', value = 'Triggers notification to send password reset code to devices'}
    set { dest = 'labels.table', value = 'cmn_notif_device'}
  }

  if ('raw_event_data.name' == 'quiz.workflow') {
    set { dest = 'message', value = 'This event is to fire the workflow for triggering the notifications for quiz'}
    set { dest = 'labels.table', value = 'asmt_assessment_instance'}
  }

  if ('raw_event_data.name' == 'reclassification_task.escalation.fired') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'reclassification_task'}
  }

  if ('raw_event_data.name' == 'reclassification_task.escalation.pause') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'reclassification_task'}
  }

  if ('raw_event_data.name' == 'reclassification_task.escalation.resume') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'reclassification_task'}
  }

  if ('raw_event_data.name' == 'reclassification_task.escalation.set') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'reclassification_task'}
  }

  if ('raw_event_data.name' == 'reclassification_task.inactivity') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'reclassification_task'}
  }

  if ('raw_event_data.name' == 'recommended_field_remediation.escalation') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'recommended_field_remediation'}
  }

  if ('raw_event_data.name' == 'recommended_field_remediation.inactivity') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'recommended_field_remediation'}
  }

  if ('raw_event_data.name' == 'reconcile_duplicate_task.escalation.fire') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'reconcile_duplicate_task'}
  }

  if ('raw_event_data.name' == 'reconcile_duplicate_task.escalation.paus') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'reconcile_duplicate_task'}
  }

  if ('raw_event_data.name' == 'reconcile_duplicate_task.escalation.resu') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'reconcile_duplicate_task'}
  }

  if ('raw_event_data.name' == 'reconcile_duplicate_task.escalation.set') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'reconcile_duplicate_task'}
  }

  if ('raw_event_data.name' == 'reconcile_duplicate_task.inactivity') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'reconcile_duplicate_task'}
  }

  if ('raw_event_data.name' == 'relationship.rollup') {
    set { dest = 'message', value = 'A relationship end point or relationship has changed, potentially requiring rollup of computed value'}
  }

  if ('raw_event_data.name' == 'relationship.rollup.relationship') {
    set { dest = 'message', value = 'A relationship has changed (as opposed to an end point)'}
  }

  if ('raw_event_data.name' == 'release_feature.assigned') {
    set { dest = 'message', value = 'Feature assigned'}
    set { dest = 'labels.table', value = 'release_feature'}
  }

  if ('raw_event_data.name' == 'release_feature.complete') {
    set { dest = 'message', value = 'Feature is 100 percent complete'}
    set { dest = 'labels.table', value = 'release_feature'}
  }

  if ('raw_event_data.name' == 'release_feature.inactive') {
    set { dest = 'message', value = 'Feature no longer active'}
    set { dest = 'labels.table', value = 'release_feature'}
  }

  if ('raw_event_data.name' == 'release_feature.state_change') {
    set { dest = 'message', value = 'Feature state change'}
    set { dest = 'labels.table', value = 'release_feature'}
  }

  if ('raw_event_data.name' == 'release_feature.updated') {
    set { dest = 'message', value = 'Feature updated'}
    set { dest = 'labels.table', value = 'release_feature'}
  }

  if ('raw_event_data.name' == 'release_phase.approved') {
    set { dest = 'message', value = 'Release Phase approved'}
    set { dest = 'labels.table', value = 'release_phase'}
  }

  if ('raw_event_data.name' == 'release_phase.complete') {
    set { dest = 'message', value = 'Release Phase completed'}
    set { dest = 'labels.table', value = 'release_phase'}
  }

  if ('raw_event_data.name' == 'release_phase.escalation.fired') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'release_phase'}
  }

  if ('raw_event_data.name' == 'release_phase.escalation.pause') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'release_phase'}
  }

  if ('raw_event_data.name' == 'release_phase.escalation.resume') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'release_phase'}
  }

  if ('raw_event_data.name' == 'release_phase.escalation.set') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'release_phase'}
  }

  if ('raw_event_data.name' == 'release_phase.inactivity') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'release_phase'}
  }

  if ('raw_event_data.name' == 'release_phase.rejected') {
    set { dest = 'message', value = 'Release Phase rejected'}
    set { dest = 'labels.table', value = 'release_phase'}
  }

  if ('raw_event_data.name' == 'release_project.inactive') {
    set { dest = 'message', value = 'Release made inactive'}
    set { dest = 'labels.table', value = 'release_project'}
  }

  if ('raw_event_data.name' == 'release_project.inserted') {
    set { dest = 'message', value = 'New release created'}
    set { dest = 'labels.table', value = 'release_project'}
  }

  if ('raw_event_data.name' == 'release_project.state_change') {
    set { dest = 'message', value = 'Release had change in state'}
    set { dest = 'labels.table', value = 'release_project'}
  }

  if ('raw_event_data.name' == 'release_project.updated') {
    set { dest = 'message', value = 'Release updated'}
    set { dest = 'labels.table', value = 'release_project'}
  }

  if ('raw_event_data.name' == 'release_task.escalation.fired') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'release_task'}
  }

  if ('raw_event_data.name' == 'release_task.escalation.pause') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'release_task'}
  }

  if ('raw_event_data.name' == 'release_task.escalation.resume') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'release_task'}
  }

  if ('raw_event_data.name' == 'release_task.escalation.set') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'release_task'}
  }

  if ('raw_event_data.name' == 'release_task.inactivity') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'release_task'}
  }

  if ('raw_event_data.name' == 'reminder.notify.delete') {
    set { dest = 'message', value = ''}
    set { dest = 'labels.table', value = 'reminder'}
  }

  if ('raw_event_data.name' == 'reminder.notify.email') {
    set { dest = 'message', value = ''}
    set { dest = 'labels.table', value = 'reminder'}
  }

  if ('raw_event_data.name' == 'reminder.notify') {
    set { dest = 'message', value = ''}
    set { dest = 'labels.table', value = 'reminder'}
  }

  if ('raw_event_data.name' == 'report.import.expire_on_date.expired') {
    set { dest = 'message', value = 'Fired when a temporary table has expired'}
    set { dest = 'labels.table', value = 'sys_report_import_table'}
  }

  if ('raw_event_data.name' == 'report.import.expire_on_date.notify') {
    set { dest = 'message', value = 'Fired when a temporary table is close to expire'}
    set { dest = 'labels.table', value = 'sys_report_import_table'}
  }

  if ('raw_event_data.name' == 'report.view.homepage') {
    set { dest = 'message', value = 'Created when a user views a report on a homepage'}
    set { dest = 'labels.table', value = 'sys_report'}
    set { dest = 'event.action', value ='read_resource'}
  }

  if ('raw_event_data.name' == 'report.view') {
    set { dest = 'message', value = 'Created when a user views a report'}
    set { dest = 'labels.table', value = 'sys_report'}
    set { dest = 'event.action', value ='read_resource'}
  }

  if ('raw_event_data.name' == 'request.approval.cancelled') {
    set { dest = 'message', value = 'An approval request has been cancelled'}
    set { dest = 'labels.table', value = 'sysapproval_approver'}
  }

  if ('raw_event_data.name' == 'request.approval.inserted') {
    set { dest = 'message', value = 'An approval request has been inserted asking for an approval of a catalog task'}
    set { dest = 'labels.table', value = 'sysapproval_approver'}
  }

  if ('raw_event_data.name' == 'request.approval.rejected') {
    set { dest = 'message', value = 'The catalog task has been rejected by the approver'}
    set { dest = 'labels.table', value = 'sysapproval_approver'}
  }

  if ('raw_event_data.name' == 'required_field_remediation.escalation.fi') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'required_field_remediation'}
  }

  if ('raw_event_data.name' == 'required_field_remediation.escalation.pa') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'required_field_remediation'}
  }

  if ('raw_event_data.name' == 'required_field_remediation.escalation.re') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'required_field_remediation'}
  }

  if ('raw_event_data.name' == 'required_field_remediation.escalation.se') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'required_field_remediation'}
  }

  if ('raw_event_data.name' == 'required_field_remediation.inactivity') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'required_field_remediation'}
  }

  if ('raw_event_data.name' == 'reset.password') {
    set { dest = 'message', value = 'User would like password reset'}
  }

  if ('raw_event_data.name' == 'roster_group_member.deleted') {
    set { dest = 'message', value = 'User Removed from Rostered Group'}
    set { dest = 'labels.table', value = 'sys_user_grmember'}
  }

  if ('raw_event_data.name' == 'roster_schedule_span_proposal.escalation') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'roster_schedule_span_proposal'}
  }

  if ('raw_event_data.name' == 'roster_schedule_span_proposal.inactivity') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'roster_schedule_span_proposal'}
  }

  if ('raw_event_data.name' == 'rota.on_call.reminder') {
    set { dest = 'message', value = 'Reminder for upcoming on-call shift'}
    set { dest = 'labels.table', value = 'cmn_rota_roster'}
  }

  if ('raw_event_data.name' == 'rota.on_call.report') {
    set { dest = 'message', value = ''}
  }

  if ('raw_event_data.name' == 'rota.on_call.subscription') {
    set { dest = 'message', value = 'URL used to subscribe to their on-call rotation calendar'}
    set { dest = 'labels.table', value = 'cmn_rota'}
  }

  if ('raw_event_data.name' == 'rota.on_call.table.reminder') {
    set { dest = 'message', value = 'Reminder for upcoming on-call shift large report so stored in database'}
    set { dest = 'labels.table', value = 'cmn_rota_roster'}
  }

  if ('raw_event_data.name' == 'sc_cart_item.multi_row.orphan.delete') {
    copy { src = 'raw_event_data.parm1', dest = 'resource.id' }
    set { dest = 'resource.type', value = 'record'}
  }

  if ('raw_event_data.name' == 'sc_req_item.assigned') {
    set { dest = 'message', value = 'Service Catalog request item assigned'}
    set { dest = 'labels.table', value = 'sc_req_item'}
  }

  if ('raw_event_data.name' == 'sc_req_item.change.stage') {
    set { dest = 'message', value = 'A Request Item has changes state'}
    set { dest = 'labels.table', value = 'sc_req_item'}
  }

  if ('raw_event_data.name' == 'sc_req_item.commented.itil') {
    set { dest = 'message', value = 'Service Catalog request item commented (assignee notification)'}
    set { dest = 'labels.table', value = 'sc_req_item'}
  }

  if ('raw_event_data.name' == 'sc_req_item.commented') {
    set { dest = 'message', value = 'Service Catalog request item commented (end user notification)'}
    set { dest = 'labels.table', value = 'sc_req_item'}
  }

  if ('raw_event_data.name' == 'sc_req_item.delivery') {
    set { dest = 'message', value = 'Service Catalog request item is being delivered'}
    set { dest = 'labels.table', value = 'sc_req_item'}
  }

  if ('raw_event_data.name' == 'sc_req_item.escalation.fired') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'sc_req_item'}
  }

  if ('raw_event_data.name' == 'sc_req_item.escalation.pause') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'sc_req_item'}
  }

  if ('raw_event_data.name' == 'sc_req_item.escalation.resume') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'sc_req_item'}
  }

  if ('raw_event_data.name' == 'sc_req_item.escalation.set') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'sc_req_item'}
  }

  if ('raw_event_data.name' == 'sc_req_item.inactivity') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'sc_req_item'}
  }

  if ('raw_event_data.name' == 'sc_req_item.inserted') {
    set { dest = 'message', value = 'Service Catalog request item inserted'}
    set { dest = 'labels.table', value = 'sc_req_item'}
  }

  if ('raw_event_data.name' == 'sc_request.approved') {
    set { dest = 'message', value = 'Service Catalog request approved'}
    set { dest = 'labels.table', value = 'sc_request'}
  }

  if ('raw_event_data.name' == 'sc_request.assigned') {
    set { dest = 'message', value = 'Service Catalog request assigned'}
    set { dest = 'labels.table', value = 'sc_request'}
  }

  if ('raw_event_data.name' == 'sc_request.escalation.fired') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'sc_request'}
  }

  if ('raw_event_data.name' == 'sc_request.escalation.pause') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'sc_request'}
  }

  if ('raw_event_data.name' == 'sc_request.escalation.resume') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'sc_request'}
  }

  if ('raw_event_data.name' == 'sc_request.escalation.set') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'sc_request'}
  }

  if ('raw_event_data.name' == 'sc_request.inactivity') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'sc_request'}
  }

  if ('raw_event_data.name' == 'sc_request.inserted') {
    set { dest = 'message', value = 'Service Catalog request inserted'}
    set { dest = 'labels.table', value = 'sc_request'}
  }

  if ('raw_event_data.name' == 'sc_request.requested_for') {
    set { dest = 'message', value = 'Service Catalog request requested_for'}
    set { dest = 'labels.table', value = 'sc_request'}
  }

  if ('raw_event_data.name' == 'sc_request.updated') {
    set { dest = 'message', value = 'Service Catalog request updated'}
    set { dest = 'labels.table', value = 'sc_request'}
  }

  if ('raw_event_data.name' == 'sc_task.approval.cancelled') {
    set { dest = 'message', value = 'An approval request has been cancelled'}
    set { dest = 'labels.table', value = 'sysapproval_approver'}
  }

  if ('raw_event_data.name' == 'sc_task.approval.inserted') {
    set { dest = 'message', value = 'An approval record for a Service Catalog Task has been inserted'}
    set { dest = 'labels.table', value = 'sc_task'}
  }

  if ('raw_event_data.name' == 'sc_task.approval.rejected') {
    set { dest = 'message', value = 'An approval record for a Service Catalog Task has been rejected'}
    set { dest = 'labels.table', value = 'sc_task'}
  }

  if ('raw_event_data.name' == 'sc_task.assigned.to.group') {
    set { dest = 'message', value = 'A service catalog task has had its assignment group set'}
    set { dest = 'labels.table', value = 'sc_task'}
  }

  if ('raw_event_data.name' == 'sc_task.assigned.to.user') {
    set { dest = 'message', value = 'A service catalog task has had its assigned to user set'}
    set { dest = 'labels.table', value = 'sc_task'}
  }

  if ('raw_event_data.name' == 'sc_task.escalation.fired') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'sc_task'}
  }

  if ('raw_event_data.name' == 'sc_task.escalation.pause') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'sc_task'}
  }

  if ('raw_event_data.name' == 'sc_task.escalation.resume') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'sc_task'}
  }

  if ('raw_event_data.name' == 'sc_task.escalation.set') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'sc_task'}
  }

  if ('raw_event_data.name' == 'sc_task.inactivity') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'sc_task'}
  }

  if ('raw_event_data.name' == 'sc_task.worknoted') {
    set { dest = 'message', value = 'Something added to the "Work notes" field'}
    set { dest = 'labels.table', value = 'sc_task'}
  }

  if ('raw_event_data.name' == 'sc_variable.attachments.delete') {
    set { dest = 'message', value = 'Fired while submitting a request, to delete any unreferenced variable level attachments.'}
  }

  if ('raw_event_data.name' == 'scheduled_import_set.completed') {
    set { dest = 'message', value = 'Scheduled Import completed event'}
  }

  if ('raw_event_data.name' == 'search_suggestion_blacklist.deleted') {
    set { dest = 'message', value = 'Fires when a row in the Search Suggestion Blacklist table is deleted/updated'}
    set { dest = 'labels.table', value = 'sys_search_suggestion_blacklist'}
  }

  if ('raw_event_data.name' == 'search_suggestion_blacklist.inserted') {
    set { dest = 'message', value = 'Fires when a row in the Search Suggestion Blacklist table is inserted/updated'}
    set { dest = 'labels.table', value = 'sys_search_suggestion_blacklist'}
  }

  if ('raw_event_data.name' in ['security.elevated_role.enabled', 'security.elevated_role.disabled']) {
    # Admin user privileged role session start/end events
    # Any role can be set as privileged, it's just a checkbox that doesn't infer any specific permissions
    # The 'security_admin' role is the default privileged role required for changing High Security settings.

    set { dest = 'labels.table', value = 'sysevent'}
    rename { src = 'raw_event_data.parm1', dest = 'user.name'}
    rename { src = 'raw_event_data.user_id', dest = 'user.id'}

    set { dest = 'resource.type', value = 'role'}
    rename { src = 'raw_event_data.parm2', dest = 'resource.name'}

    if ('raw_event_data.name' == 'security.elevated_role.enabled') {
      set { dest = 'message', value = 'Admin user assumed a privileged role session'}
      set { dest = 'event.action', value = 'elevate_role'}
      copy { src = 'resource.name', dest = 'user.roles', append = true}
    }

    if ('raw_event_data.name' == 'security.elevated_role.disabled') {
      set { dest = 'message', value = 'Admin user ended a privileged role session'}
      set { dest = 'event.action', value = 'demote_role'}
    }
  }

  if ('raw_event_data.name' == 'service_task.escalation.fired') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'service_task'}
  }

  if ('raw_event_data.name' == 'service_task.escalation.pause') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'service_task'}
  }

  if ('raw_event_data.name' == 'service_task.escalation.resume') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'service_task'}
  }

  if ('raw_event_data.name' == 'service_task.escalation.set') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'service_task'}
  }

  if ('raw_event_data.name' == 'service_task.inactivity') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'service_task'}
  }

  if ('raw_event_data.name' == 'session.established') {
    set { dest = 'message', value = 'Fired when a user is authenticated and bound to a session for the first time'}
  }

  if ('raw_event_data.name' == 'sla.warning.breach.parm') {
    set { dest = 'message', value = 'Warning that the SLA has hit a milestone'}
    set { dest = 'labels.table', value = 'task_sla'}
  }

  if ('raw_event_data.name' == 'sla.warning.breach') {
    set { dest = 'message', value = 'Warning that the SLA has hit a milestone'}
    set { dest = 'labels.table', value = 'task_sla'}
  }

  if ('raw_event_data.name' == 'sla.warning.ci.breach') {
    set { dest = 'message', value = 'Warning that the SLA has hit a milestone'}
    set { dest = 'labels.table', value = 'task_sla'}
  }

  if ('raw_event_data.name' == 'sla.warning.ci') {
    set { dest = 'message', value = ''}
    set { dest = 'labels.table', value = 'task_sla'}
  }

  if ('raw_event_data.name' == 'sla.warning.parm') {
    set { dest = 'message', value = 'Warning that the SLA has hit a milestone'}
    set { dest = 'labels.table', value = 'task_sla'}
  }

  if ('raw_event_data.name' == 'sla.warning') {
    set { dest = 'message', value = 'Warning that the SLA has hit a milestone'}
    set { dest = 'labels.table', value = 'task_sla'}
  }

  if ('raw_event_data.name' == 'sn_appauthor.check.config.update') {
    set { dest = 'message', value = 'Checks the store for updates that need to be applied to Author properties'}
  }

  if ('raw_event_data.name' == 'sn_appclient.check.for.update') {
    set { dest = 'message', value = 'Checks for updates to scoped apps, auto-installs updates for apps marked auto-update '}
  }

  if ('raw_event_data.name' == 'sn_appclient.update.logos') {
    set { dest = 'message', value = 'Invokes Update Logos script action which downloads logos for apps'}
  }

  if ('raw_event_data.name' == 'sn_appclient.update.manifests') {
    set { dest = 'message', value = 'Fetches app manifests for versions which do not have one'}
  }

  if ('raw_event_data.name' == 'sn_appclient.update.system.property') {
    set { dest = 'message', value = 'Invokes Update system property script action which updates system property value'}
  }

  if ('raw_event_data.name' == 'sn_bm_client.download.scores') {
    set { dest = 'message', value = 'Event which triggers the download of benchmark global scores to the client instance'}
  }

  if ('raw_event_data.name' == 'sn_bm_client.download.scores.6months') {
    set { dest = 'message', value = 'Event which triggers the download of six months benchmark global scores to the client instance'}
  }

  if ('raw_event_data.name' == 'sn_bm_client.eval_recos') {
    set { dest = 'message', value = 'Evaluate the recommendations for the benchmarking indicators'}
  }

  if ('raw_event_data.name' == 'sn_bm_client.global.score.recalculation') {
    set { dest = 'message', value = 'Event which triggers sending the notification of global score recalculation from central side'}
  }

  if ('raw_event_data.name' == 'sn_bm_client.kpi.version.change') {
    set { dest = 'message', value = 'Event which triggers sending the notification of KPI version change from central side'}
  }

  if ('raw_event_data.name' == 'sn_bm_client.monthly.data.published') {
    set { dest = 'message', value = 'Event is fired when the benchmark data is downloaded to the instance.'}
  }

  if ('raw_event_data.name' == 'sn_bm_client.upload.scores') {
    set { dest = 'message', value = 'Event which triggers the upload of benchmark scores to the central instance'}
  }

  if ('raw_event_data.name' == 'sn_change.state.updated') {
    set { dest = 'message', value = 'A Change request\'s state has been updated'}
    set { dest = 'labels.table', value = 'change_request'}
  }

  if ('raw_event_data.name' == 'sn_change_cab.change_request.delegate') {
    set { dest = 'message', value = 'Created when the CAB Delegate field is updated on a Change request that is related to a CAB Meeting'}
    set { dest = 'labels.table', value = 'cab_attendee'}
  }

  if ('raw_event_data.name' == 'sn_change_cab.meeting.attendee.invite') {
    set { dest = 'message', value = 'Used to trigger a calendar invitation request email to an attendee on a CAB Meeting'}
    set { dest = 'labels.table', value = 'cab_attendee'}
  }

  if ('raw_event_data.name' == 'sn_change_cab.meeting.attendees.delegate') {
    set { dest = 'message', value = 'Created when a CAB Meeting attendee is created or updated and is also in the list of CAB Delegates'}
    set { dest = 'labels.table', value = 'cab_attendee'}
  }

  if ('raw_event_data.name' == 'sn_change_cab.meeting.cab_board.invite') {
    set { dest = 'message', value = 'Used to trigger a calendar invitation request email to a board member on a CAB Meeting'}
    set { dest = 'labels.table', value = 'cab_attendee'}
  }

  if ('raw_event_data.name' == 'sn_change_cab.meeting.cancel.notify') {
    set { dest = 'message', value = 'Triggers notification when meeting is cancelled'}
    set { dest = 'labels.table', value = 'cab_attendee'}
  }

  if ('raw_event_data.name' == 'sn_change_cab.meeting.delegate.invite') {
    set { dest = 'message', value = 'Used to trigger a calendar invitation request email to a delegate on a CAB Meeting'}
    set { dest = 'labels.table', value = 'cab_attendee'}
  }

  if ('raw_event_data.name' == 'sn_change_cab.shareMeetingNotes') {
    set { dest = 'message', value = 'Triggers MeetingNotes as EMail Notification '}
  }

  if ('raw_event_data.name' == 'sn_chg_mgt.affected.CREATE') {
    set { dest = 'message', value = 'Change Management generated event to create an affected CI'}
  }

  if ('raw_event_data.name' == 'sn_chg_mgt.impacted.REFRESH') {
    set { dest = 'message', value = 'Change Management generated event to refresh impacted services'}
  }

  if ('raw_event_data.name' == 'sn_chg_mgt.impacted_ci.CREATE') {
    set { dest = 'message', value = 'Change Management generated event to create an Impacted Service/CI'}
  }

  if ('raw_event_data.name' == 'sn_chg_mgt.offering.CREATE') {
    set { dest = 'message', value = 'Change Management generated event to create a service offering'}
  }

  if ('raw_event_data.name' == 'sn_chg_soc.share.invitation') {
    set { dest = 'message', value = ''}
  }

  if ('raw_event_data.name' == 'sn_dependentclient.check.dependent_apps') {
    set { dest = 'message', value = 'Checks updates from Appstore for applications dependent on installed plugins.'}
  }

  if ('raw_event_data.name' == 'sn_kb_social_qa.answer.accepted') {
    set { dest = 'message', value = 'Fired when answer is accepted'}
    set { dest = 'labels.table', value = 'kb_social_qa_answer'}
  }

  if ('raw_event_data.name' == 'sn_kb_social_qa.answer.commented') {
    set { dest = 'message', value = 'Fired when an answer has been commented'}
    set { dest = 'labels.table', value = 'kb_social_qa_comment'}
  }

  if ('raw_event_data.name' == 'sn_kb_social_qa.answer.posted') {
    set { dest = 'message', value = 'Fired when an answer has been posted to a question'}
    set { dest = 'labels.table', value = 'kb_social_qa_answer'}
  }

  if ('raw_event_data.name' == 'sn_kb_social_qa.answer.voted') {
    set { dest = 'message', value = 'Fired when an answer is voted'}
    set { dest = 'labels.table', value = 'kb_social_qa_vote'}
  }

  if ('raw_event_data.name' == 'sn_kb_social_qa.question.commented') {
    set { dest = 'message', value = 'A new comment has been added to a question'}
    set { dest = 'labels.table', value = 'kb_social_qa_comment'}
  }

  if ('raw_event_data.name' == 'sn_kb_social_qa.question.posted') {
    set { dest = 'message', value = 'Fired when a new question is posted'}
    set { dest = 'labels.table', value = 'kb_social_qa_question'}
  }

  if ('raw_event_data.name' == 'sn_kb_social_qa.question.voted') {
    set { dest = 'message', value = 'Fired when a Question is voted by the user'}
    set { dest = 'labels.table', value = 'kb_social_qa_vote'}
  }

  if ('raw_event_data.name' == 'sn_publications.addBcc') {
    set { dest = 'message', value = ''}
  }

  if ('raw_event_data.name' == 'sn_publications.build_recipient_list') {
    set { dest = 'message', value = ''}
  }

  if ('raw_event_data.name' == 'sn_publications.build_rl_publication') {
    set { dest = 'message', value = 'This event is fired to refresh the Recipeint List when the number of recipients is more'}
  }

  if ('raw_event_data.name' == 'sn_publications.createEmail') {
    set { dest = 'message', value = ''}
  }

  if ('raw_event_data.name' == 'snc.subscription.created') {
    set { dest = 'message', value = 'Invoked when a subscription is created'}
    set { dest = 'labels.table', value = 'license_details'}
  }

  if ('raw_event_data.name' == 'snc.subscription.download.completed') {
    set { dest = 'message', value = 'Subscription download completed'}
  }

  if ('raw_event_data.name' == 'snc.subscription.overused') {
    set { dest = 'message', value = 'Invoked when a subscription\'s used count exceeds the purchased count'}
    set { dest = 'labels.table', value = 'license_details'}
  }

  if ('raw_event_data.name' == 'stale_ci_remediation.escalation.fired') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'stale_ci_remediation'}
  }

  if ('raw_event_data.name' == 'stale_ci_remediation.escalation.pause') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'stale_ci_remediation'}
  }

  if ('raw_event_data.name' == 'stale_ci_remediation.escalation.resume') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'stale_ci_remediation'}
  }

  if ('raw_event_data.name' == 'stale_ci_remediation.escalation.set') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'stale_ci_remediation'}
  }

  if ('raw_event_data.name' == 'stale_ci_remediation.inactivity') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'stale_ci_remediation'}
  }

  if ('raw_event_data.name' == 'statemgmt_renew_lease_task.escalation.fi') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'statemgmt_renew_lease_task'}
  }

  if ('raw_event_data.name' == 'statemgmt_renew_lease_task.escalation.pa') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'statemgmt_renew_lease_task'}
  }

  if ('raw_event_data.name' == 'statemgmt_renew_lease_task.escalation.re') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'statemgmt_renew_lease_task'}
  }

  if ('raw_event_data.name' == 'statemgmt_renew_lease_task.escalation.se') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'statemgmt_renew_lease_task'}
  }

  if ('raw_event_data.name' == 'statemgmt_renew_lease_task.inactivity') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'statemgmt_renew_lease_task'}
  }

  if ('raw_event_data.name' == 'std_change_proposal.approval.inserted') {
    set { dest = 'message', value = 'An approval request has been inserted asking for an approval of a "Standard Change Proposal"'}
    set { dest = 'labels.table', value = 'sysapproval_approver'}
  }

  if ('raw_event_data.name' == 'std_change_proposal.approval.rejected') {
    set { dest = 'message', value = 'Event raised when request for a "Standard Change Proposal" has been rejected'}
    set { dest = 'labels.table', value = 'sysapproval_approver'}
  }

  if ('raw_event_data.name' == 'std_change_proposal.escalation.fired') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'std_change_proposal'}
  }

  if ('raw_event_data.name' == 'std_change_proposal.escalation.pause') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'std_change_proposal'}
  }

  if ('raw_event_data.name' == 'std_change_proposal.escalation.resume') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'std_change_proposal'}
  }

  if ('raw_event_data.name' == 'std_change_proposal.escalation.set') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'std_change_proposal'}
  }

  if ('raw_event_data.name' == 'std_change_proposal.inactivity') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'std_change_proposal'}
  }

  if ('raw_event_data.name' == 'suite.completed') {
    set { dest = 'message', value = 'Event triggered to send email when test suite completes'}
    set { dest = 'labels.table', value = 'sys_atf_test_suite_result'}
  }

  if ('raw_event_data.name' == 'sys_illegal_member.inserted') {
    set { dest = 'message', value = 'Fires when a sys_illegal_member record is inserted, triggers a Script Action'}
    set { dest = 'labels.table', value = 'sys_illegal_member'}
  }

  if ('raw_event_data.name' == 'sys_illegal_package.inserted') {
    set { dest = 'message', value = 'Fires when a sys_illegal_package record is inserted, triggers a Script Action'}
    set { dest = 'labels.table', value = 'sys_illegal_package'}
  }

  if ('raw_event_data.name' == 'sys_import_set_run.complete_with_errors') {
    set { dest = 'message', value = 'Generated by ImportSetRun on error.'}
  }

  if ('raw_event_data.name' == 'sysapproval_group.escalation.fired') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'sysapproval_group'}
  }

  if ('raw_event_data.name' == 'sysapproval_group.escalation.pause') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'sysapproval_group'}
  }

  if ('raw_event_data.name' == 'sysapproval_group.escalation.resume') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'sysapproval_group'}
  }

  if ('raw_event_data.name' == 'sysapproval_group.escalation.set') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'sysapproval_group'}
  }

  if ('raw_event_data.name' == 'sysapproval_group.inactivity') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'sysapproval_group'}
  }

  if ('raw_event_data.name' == 'system.create') {
    set { dest = 'message', value = 'Create a new instance with the next available port'}
  }

  if ('raw_event_data.name' == 'system.deploy') {
    set { dest = 'message', value = 'Request to create a new instance'}
  }

  if ('raw_event_data.name' == 'system.patched') {
    set { dest = 'message', value = 'upgrade patch script has completed '}
  }

  if ('raw_event_data.name' == 'system.retire') {
    set { dest = 'message', value = 'retire an instance'}
  }

  if ('raw_event_data.name' == 'system.runscript') {
    set { dest = 'message', value = 'run the script on this system defined in parm1'}
  }

  if ('raw_event_data.name' == 'system.update') {
    set { dest = 'message', value = 'update the system with new code'}
  }

  if ('raw_event_data.name' == 'system.update.waronly') {
    set { dest = 'message', value = 'update the system with new binaries only. Do not upgrade apps'}
  }

  if ('raw_event_data.name' == 'system.upgrade') {
    set { dest = 'message', value = 'run the upgrade script on this system'}
  }

  if ('raw_event_data.name' == 'system.upgrade.failed') {
    set { dest = 'message', value = 'Upgrade.js has failed and not completed successfully'}
  }

  if ('raw_event_data.name' == 'system.upgraded') {
    set { dest = 'message', value = 'upgrade script has completed '}
  }

  if ('raw_event_data.name' == 'table_rotation.create_extension') {
    set { dest = 'message', value = 'Created the next extension for this table'}
  }

  if ('raw_event_data.name' == 'table_rotation.delete_extension') {
    set { dest = 'message', value = 'Deletes a table rotation extension'}
    set { dest = 'labels.table', value = 'sys_table_rotation'}
  }

  if ('raw_event_data.name' == 'table_rotation.synchronize') {
    set { dest = 'message', value = 'Verifies the definition of all rotations/extensions for a table'}
  }

  if ('raw_event_data.name' == 'table_rotation.truncate') {
    set { dest = 'message', value = 'Truncate the next table that is in the rotation'}
  }

  if ('raw_event_data.name' == 'task.approved') {
    set { dest = 'message', value = 'The task has been approved'}
    set { dest = 'labels.table', value = 'task'}
  }

  if ('raw_event_data.name' == 'task.escalation.fired') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'task'}
  }

  if ('raw_event_data.name' == 'task.escalation.pause') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'task'}
  }

  if ('raw_event_data.name' == 'task.escalation.resume') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'task'}
  }

  if ('raw_event_data.name' == 'task.escalation.set') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'task'}
  }

  if ('raw_event_data.name' == 'task.inactivity') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'task'}
  }

  if ('raw_event_data.name' == 'task.rejected') {
    set { dest = 'message', value = 'The task has been rejected'}
    set { dest = 'labels.table', value = 'task'}
  }

  if ('raw_event_data.name' == 'teamdev.codereview.cancelled') {
    set { dest = 'message', value = ''}
    set { dest = 'labels.table', value = 'sys_sync_history'}
  }

  if ('raw_event_data.name' == 'text_index.build_doc_freq.complete') {
    set { dest = 'message', value = 'The completion of a Build Document Frequency has been completed'}
  }

  if ('raw_event_data.name' == 'text_index.complete') {
    set { dest = 'message', value = 'The completion of a text index has been completed'}
  }

  if ('raw_event_data.name' == 'ticket.escalation.fired') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'ticket'}
  }

  if ('raw_event_data.name' == 'ticket.escalation.pause') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'ticket'}
  }

  if ('raw_event_data.name' == 'ticket.escalation.resume') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'ticket'}
  }

  if ('raw_event_data.name' == 'ticket.escalation.set') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'ticket'}
  }

  if ('raw_event_data.name' == 'ticket.inactivity') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'ticket'}
  }

  if ('raw_event_data.name' == 'transaction.cancelled') {
    set { dest = 'message', value = 'A transaction has been cancelled'}
  }

  if ('raw_event_data.name' == 'trigger_rule.process') {
    set { dest = 'message', value = 'Trigger Rule being activated - Script Action: "Process Trigger Rule" will process the event'}
    set { dest = 'labels.table', value = 'trigger_rule'}
  }

  if ('raw_event_data.name' == 'ua.cleanup.license') {
    set { dest = 'message', value = 'Cleanup License'}
    set { dest = 'labels.table', value = 'license_details'}
  }

  if ('raw_event_data.name' == 'ua.customtable.insert') {
    set { dest = 'message', value = 'Add custom tables into UA inventory'}
  }

  if ('raw_event_data.name' == 'ua.entitlement.disabled') {
    set { dest = 'message', value = 'UA Entitlement disabled'}
  }

  if ('raw_event_data.name' == 'ua.entitlement.enabled') {
    set { dest = 'message', value = 'UA Entitlement enabled'}
  }

  if ('raw_event_data.name' == 'upgrade_history_task.escalation.fired') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'upgrade_history_task'}
  }

  if ('raw_event_data.name' == 'upgrade_history_task.escalation.pause') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'upgrade_history_task'}
  }

  if ('raw_event_data.name' == 'upgrade_history_task.escalation.resume') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'upgrade_history_task'}
  }

  if ('raw_event_data.name' == 'upgrade_history_task.escalation.set') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'upgrade_history_task'}
  }

  if ('raw_event_data.name' == 'upgrade_history_task.inactivity') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'upgrade_history_task'}
  }

  if ('raw_event_data.name' == 'user.view') {
    set { dest = 'message', value = 'Fires when user views a record'}
  }

  if ('raw_event_data.name' == 'vtb_board_member.deleted') {
    set { dest = 'message', value = 'An email is sent when a member is removed from VTB Board'}
    set { dest = 'labels.table', value = 'vtb_board_member'}
  }

  if ('raw_event_data.name' == 'vtb_card.send.laneupdate') {
    set { dest = 'message', value = 'Sends the lane change message to connect chat'}
    set { dest = 'labels.table', value = 'vtb_card'}
  }

  if ('raw_event_data.name' == 'vtb_task.escalation.fired') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'vtb_task'}
  }

  if ('raw_event_data.name' == 'vtb_task.escalation.pause') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'vtb_task'}
  }

  if ('raw_event_data.name' == 'vtb_task.escalation.resume') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'vtb_task'}
  }

  if ('raw_event_data.name' == 'vtb_task.escalation.set') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'vtb_task'}
  }

  if ('raw_event_data.name' == 'vtb_task.inactivity') {
    set { dest = 'message', value = 'System Generated Escalation Event'}
    set { dest = 'labels.table', value = 'vtb_task'}
  }

  if ('raw_event_data.name' == 'vtb_task.previous.additional_assignee') {
    set { dest = 'message', value = 'When additional assignees updated on VTB, previous value determines who to email notify'}
    set { dest = 'labels.table', value = 'vtb_task'}
  }

  if ('raw_event_data.name' == 'workflow.notification') {
    set { dest = 'event.action', value = 'notify_workflow'}
  }

  if ('raw_event_data.name' == 'x_apom_appomni.realtime_export_job') {
    set { dest = 'message', value = ''}
    set { dest = 'labels.table', value = 'x_apom_appomni_export_configuration'}
  }

  if ( 'user.name' == 'Guest' ) {
    to_lower { src = 'user.name' }
  }

  if ( 'user.target.name' == 'Guest' ) {
    to_lower { src = 'user.target.name' }
  }

  if ('user.name' == 'guest') {
    append { dest = 'tags', value = 'unauthenticated' }
  }

